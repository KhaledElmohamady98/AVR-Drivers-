
Driver_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002252  000022e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  000022f6  2**0
                  ALLOC
  3 .stab         00001b54  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c44  00000000  00000000  00003e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00008fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000928a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <main>
      8a:	0c 94 27 11 	jmp	0x224e	; 0x224e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e6       	ldi	r22, 0x67	; 103
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_set_pin_direction>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

U8 DIO_set_pin_direction(U8 port_NB,U8 pin_NB,U8 pin_direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_set_pin_direction+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_set_pin_direction+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <DIO_set_pin_direction+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	8a 83       	std	Y+2, r24	; 0x02
     cae:	6b 83       	std	Y+3, r22	; 0x03
     cb0:	4c 83       	std	Y+4, r20	; 0x04
U8 error_state = 0;
     cb2:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	84 30       	cpi	r24, 0x04	; 4
     cb8:	18 f0       	brcs	.+6      	; 0xcc0 <DIO_set_pin_direction+0x22>
{
	error_state = 1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	e0 c0       	rjmp	.+448    	; 0xe80 <DIO_set_pin_direction+0x1e2>
}
else if(pin_NB>=DIO_Max_pin_NB )
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	88 30       	cpi	r24, 0x08	; 8
     cc4:	18 f0       	brcs	.+6      	; 0xccc <DIO_set_pin_direction+0x2e>
{
	error_state = 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	da c0       	rjmp	.+436    	; 0xe80 <DIO_set_pin_direction+0x1e2>
}
else if((pin_direction !=DIO_Input) && (pin_direction!=DIO_Output))
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	88 23       	and	r24, r24
     cd0:	31 f0       	breq	.+12     	; 0xcde <DIO_set_pin_direction+0x40>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	19 f0       	breq	.+6      	; 0xcde <DIO_set_pin_direction+0x40>
{
	error_state = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	d1 c0       	rjmp	.+418    	; 0xe80 <DIO_set_pin_direction+0x1e2>
}
else{
     switch(port_NB){
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	3e 83       	std	Y+6, r19	; 0x06
     ce6:	2d 83       	std	Y+5, r18	; 0x05
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	9e 81       	ldd	r25, Y+6	; 0x06
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <DIO_set_pin_direction+0x56>
     cf2:	43 c0       	rjmp	.+134    	; 0xd7a <DIO_set_pin_direction+0xdc>
     cf4:	2d 81       	ldd	r18, Y+5	; 0x05
     cf6:	3e 81       	ldd	r19, Y+6	; 0x06
     cf8:	22 30       	cpi	r18, 0x02	; 2
     cfa:	31 05       	cpc	r19, r1
     cfc:	2c f4       	brge	.+10     	; 0xd08 <DIO_set_pin_direction+0x6a>
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	71 f0       	breq	.+28     	; 0xd22 <DIO_set_pin_direction+0x84>
     d06:	bc c0       	rjmp	.+376    	; 0xe80 <DIO_set_pin_direction+0x1e2>
     d08:	2d 81       	ldd	r18, Y+5	; 0x05
     d0a:	3e 81       	ldd	r19, Y+6	; 0x06
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	31 05       	cpc	r19, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <DIO_set_pin_direction+0x76>
     d12:	5f c0       	rjmp	.+190    	; 0xdd2 <DIO_set_pin_direction+0x134>
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	91 05       	cpc	r25, r1
     d1c:	09 f4       	brne	.+2      	; 0xd20 <DIO_set_pin_direction+0x82>
     d1e:	85 c0       	rjmp	.+266    	; 0xe2a <DIO_set_pin_direction+0x18c>
     d20:	af c0       	rjmp	.+350    	; 0xe80 <DIO_set_pin_direction+0x1e2>
      case Group_A:
	   assign_bit(DIO_U8_DDRA,pin_NB,pin_direction);
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	a1 f4       	brne	.+40     	; 0xd50 <DIO_set_pin_direction+0xb2>
     d28:	aa e3       	ldi	r26, 0x3A	; 58
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e3       	ldi	r30, 0x3A	; 58
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_set_pin_direction+0xa8>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_set_pin_direction+0xa4>
     d4a:	84 2b       	or	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	98 c0       	rjmp	.+304    	; 0xe80 <DIO_set_pin_direction+0x1e2>
     d50:	aa e3       	ldi	r26, 0x3A	; 58
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ea e3       	ldi	r30, 0x3A	; 58
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	48 2f       	mov	r20, r24
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_set_pin_direction+0xd0>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <DIO_set_pin_direction+0xcc>
     d72:	80 95       	com	r24
     d74:	84 23       	and	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	83 c0       	rjmp	.+262    	; 0xe80 <DIO_set_pin_direction+0x1e2>
	   break;
	   case Group_B:
	   assign_bit(DIO_U8_DDRB,pin_NB,pin_direction);
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	a1 f4       	brne	.+40     	; 0xda8 <DIO_set_pin_direction+0x10a>
     d80:	a7 e3       	ldi	r26, 0x37	; 55
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e7 e3       	ldi	r30, 0x37	; 55
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_set_pin_direction+0x100>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_set_pin_direction+0xfc>
     da2:	84 2b       	or	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	6c c0       	rjmp	.+216    	; 0xe80 <DIO_set_pin_direction+0x1e2>
     da8:	a7 e3       	ldi	r26, 0x37	; 55
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e7 e3       	ldi	r30, 0x37	; 55
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_set_pin_direction+0x128>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_set_pin_direction+0x124>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	57 c0       	rjmp	.+174    	; 0xe80 <DIO_set_pin_direction+0x1e2>
	   break;
     case Group_C:
	   assign_bit(DIO_U8_DDRC,pin_NB,pin_direction);
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	a1 f4       	brne	.+40     	; 0xe00 <DIO_set_pin_direction+0x162>
     dd8:	a4 e3       	ldi	r26, 0x34	; 52
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e4 e3       	ldi	r30, 0x34	; 52
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_set_pin_direction+0x158>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_set_pin_direction+0x154>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	40 c0       	rjmp	.+128    	; 0xe80 <DIO_set_pin_direction+0x1e2>
     e00:	a4 e3       	ldi	r26, 0x34	; 52
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e4 e3       	ldi	r30, 0x34	; 52
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_set_pin_direction+0x180>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_set_pin_direction+0x17c>
     e22:	80 95       	com	r24
     e24:	84 23       	and	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	2b c0       	rjmp	.+86     	; 0xe80 <DIO_set_pin_direction+0x1e2>
	   break;
     case Group_D:
	   assign_bit(DIO_U8_DDRD,pin_NB,pin_direction);
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	a1 f4       	brne	.+40     	; 0xe58 <DIO_set_pin_direction+0x1ba>
     e30:	a1 e3       	ldi	r26, 0x31	; 49
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e1 e3       	ldi	r30, 0x31	; 49
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_set_pin_direction+0x1b0>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_set_pin_direction+0x1ac>
     e52:	84 2b       	or	r24, r20
     e54:	8c 93       	st	X, r24
     e56:	14 c0       	rjmp	.+40     	; 0xe80 <DIO_set_pin_direction+0x1e2>
     e58:	a1 e3       	ldi	r26, 0x31	; 49
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e1 e3       	ldi	r30, 0x31	; 49
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_set_pin_direction+0x1d8>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_set_pin_direction+0x1d4>
     e7a:	80 95       	com	r24
     e7c:	84 23       	and	r24, r20
     e7e:	8c 93       	st	X, r24
	   break;
}
}

return error_state;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
}
     e82:	26 96       	adiw	r28, 0x06	; 6
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <DIO_set_pin_value>:


U8 DIO_set_pin_value(U8 port_NB,U8 pin_NB,U8 pin_value)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <DIO_set_pin_value+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <DIO_set_pin_value+0x8>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <DIO_set_pin_value+0xa>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	8a 83       	std	Y+2, r24	; 0x02
     ea4:	6b 83       	std	Y+3, r22	; 0x03
     ea6:	4c 83       	std	Y+4, r20	; 0x04
U8 error_state = 0;
     ea8:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	84 30       	cpi	r24, 0x04	; 4
     eae:	18 f0       	brcs	.+6      	; 0xeb6 <DIO_set_pin_value+0x22>
{
	error_state = 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	e0 c0       	rjmp	.+448    	; 0x1076 <DIO_set_pin_value+0x1e2>
}
else if(pin_NB>=DIO_Max_pin_NB)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	88 30       	cpi	r24, 0x08	; 8
     eba:	18 f0       	brcs	.+6      	; 0xec2 <DIO_set_pin_value+0x2e>
{
	error_state = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	da c0       	rjmp	.+436    	; 0x1076 <DIO_set_pin_value+0x1e2>
}
else if((pin_value!=DIO_High) && (pin_value!=DIO_Low))
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	31 f0       	breq	.+12     	; 0xed4 <DIO_set_pin_value+0x40>
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	88 23       	and	r24, r24
     ecc:	19 f0       	breq	.+6      	; 0xed4 <DIO_set_pin_value+0x40>
{
	error_state = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	d1 c0       	rjmp	.+418    	; 0x1076 <DIO_set_pin_value+0x1e2>
}
else{
     switch(port_NB){
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3e 83       	std	Y+6, r19	; 0x06
     edc:	2d 83       	std	Y+5, r18	; 0x05
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <DIO_set_pin_value+0x56>
     ee8:	43 c0       	rjmp	.+134    	; 0xf70 <DIO_set_pin_value+0xdc>
     eea:	2d 81       	ldd	r18, Y+5	; 0x05
     eec:	3e 81       	ldd	r19, Y+6	; 0x06
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <DIO_set_pin_value+0x6a>
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	71 f0       	breq	.+28     	; 0xf18 <DIO_set_pin_value+0x84>
     efc:	bc c0       	rjmp	.+376    	; 0x1076 <DIO_set_pin_value+0x1e2>
     efe:	2d 81       	ldd	r18, Y+5	; 0x05
     f00:	3e 81       	ldd	r19, Y+6	; 0x06
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <DIO_set_pin_value+0x76>
     f08:	5f c0       	rjmp	.+190    	; 0xfc8 <DIO_set_pin_value+0x134>
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <DIO_set_pin_value+0x82>
     f14:	85 c0       	rjmp	.+266    	; 0x1020 <DIO_set_pin_value+0x18c>
     f16:	af c0       	rjmp	.+350    	; 0x1076 <DIO_set_pin_value+0x1e2>
      case Group_A:
	   assign_bit(DIO_U8_PORTA,pin_NB,pin_value);
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <DIO_set_pin_value+0xb2>
     f1e:	ab e3       	ldi	r26, 0x3B	; 59
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e3       	ldi	r30, 0x3B	; 59
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_set_pin_value+0xa8>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_set_pin_value+0xa4>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	98 c0       	rjmp	.+304    	; 0x1076 <DIO_set_pin_value+0x1e2>
     f46:	ab e3       	ldi	r26, 0x3B	; 59
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	eb e3       	ldi	r30, 0x3B	; 59
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_set_pin_value+0xd0>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_set_pin_value+0xcc>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	83 c0       	rjmp	.+262    	; 0x1076 <DIO_set_pin_value+0x1e2>
	   break;
	   case Group_B:
	   assign_bit(DIO_U8_PORTB,pin_NB,pin_value);
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <DIO_set_pin_value+0x10a>
     f76:	a8 e3       	ldi	r26, 0x38	; 56
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e8 e3       	ldi	r30, 0x38	; 56
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_set_pin_value+0x100>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_set_pin_value+0xfc>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	6c c0       	rjmp	.+216    	; 0x1076 <DIO_set_pin_value+0x1e2>
     f9e:	a8 e3       	ldi	r26, 0x38	; 56
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_set_pin_value+0x128>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_set_pin_value+0x124>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	57 c0       	rjmp	.+174    	; 0x1076 <DIO_set_pin_value+0x1e2>
	   break;
     case Group_C:
	   assign_bit(DIO_U8_PORTC,pin_NB,pin_value);
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <DIO_set_pin_value+0x162>
     fce:	a5 e3       	ldi	r26, 0x35	; 53
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e3       	ldi	r30, 0x35	; 53
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_set_pin_value+0x158>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_set_pin_value+0x154>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	40 c0       	rjmp	.+128    	; 0x1076 <DIO_set_pin_value+0x1e2>
     ff6:	a5 e3       	ldi	r26, 0x35	; 53
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e3       	ldi	r30, 0x35	; 53
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_set_pin_value+0x180>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_set_pin_value+0x17c>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	2b c0       	rjmp	.+86     	; 0x1076 <DIO_set_pin_value+0x1e2>
	   break;
     case Group_D:
	   assign_bit(DIO_U8_PORTD,pin_NB,pin_value);
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	a1 f4       	brne	.+40     	; 0x104e <DIO_set_pin_value+0x1ba>
    1026:	a2 e3       	ldi	r26, 0x32	; 50
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e2 e3       	ldi	r30, 0x32	; 50
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_set_pin_value+0x1b0>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_set_pin_value+0x1ac>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <DIO_set_pin_value+0x1e2>
    104e:	a2 e3       	ldi	r26, 0x32	; 50
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e2 e3       	ldi	r30, 0x32	; 50
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_set_pin_value+0x1d8>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_set_pin_value+0x1d4>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
	   break;
     }
}


return error_state;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	26 96       	adiw	r28, 0x06	; 6
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <DIO_set_port_value>:


U8 DIO_set_port_value(U8 port_NB,U8 port_value)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <DIO_set_port_value+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <DIO_set_port_value+0x8>
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	8a 83       	std	Y+2, r24	; 0x02
    109a:	6b 83       	std	Y+3, r22	; 0x03
U8 error_state = 0;
    109c:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	84 30       	cpi	r24, 0x04	; 4
    10a2:	18 f0       	brcs	.+6      	; 0x10aa <DIO_set_port_value+0x20>
{
	error_state = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	32 c0       	rjmp	.+100    	; 0x110e <DIO_set_port_value+0x84>
else if(port_value>DIO_Max_port_value)
{
	error_state = 1;
}
else{
     switch(port_NB){
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	3d 83       	std	Y+5, r19	; 0x05
    10b2:	2c 83       	std	Y+4, r18	; 0x04
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	91 05       	cpc	r25, r1
    10bc:	d1 f0       	breq	.+52     	; 0x10f2 <DIO_set_port_value+0x68>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	2c f4       	brge	.+10     	; 0x10d2 <DIO_set_port_value+0x48>
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	61 f0       	breq	.+24     	; 0x10e8 <DIO_set_port_value+0x5e>
    10d0:	1e c0       	rjmp	.+60     	; 0x110e <DIO_set_port_value+0x84>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	81 f0       	breq	.+32     	; 0x10fc <DIO_set_port_value+0x72>
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	83 30       	cpi	r24, 0x03	; 3
    10e2:	91 05       	cpc	r25, r1
    10e4:	81 f0       	breq	.+32     	; 0x1106 <DIO_set_port_value+0x7c>
    10e6:	13 c0       	rjmp	.+38     	; 0x110e <DIO_set_port_value+0x84>
      case Group_A:
    	  DIO_U8_PORTA = port_value;
    10e8:	eb e3       	ldi	r30, 0x3B	; 59
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	80 83       	st	Z, r24
    10f0:	0e c0       	rjmp	.+28     	; 0x110e <DIO_set_port_value+0x84>
	   break;
	   case Group_B:
		   DIO_U8_PORTB = port_value;
    10f2:	e8 e3       	ldi	r30, 0x38	; 56
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	80 83       	st	Z, r24
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <DIO_set_port_value+0x84>
	   break;
     case Group_C:
    	 DIO_U8_PORTC = port_value;
    10fc:	e5 e3       	ldi	r30, 0x35	; 53
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	80 83       	st	Z, r24
    1104:	04 c0       	rjmp	.+8      	; 0x110e <DIO_set_port_value+0x84>
	   break;
     case Group_D:
    	 DIO_U8_PORTD = port_value;
    1106:	e2 e3       	ldi	r30, 0x32	; 50
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	80 83       	st	Z, r24
	   break;
     }
}


return error_state;
    110e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <DIO_set_port_direction>:


U8 DIO_set_port_direction(U8 port_NB, U8 port_direction)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <DIO_set_port_direction+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <DIO_set_port_direction+0x8>
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	6b 83       	std	Y+3, r22	; 0x03
U8 error_state = 0;
    1132:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	18 f0       	brcs	.+6      	; 0x1140 <DIO_set_port_direction+0x20>
{
	error_state = 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	32 c0       	rjmp	.+100    	; 0x11a4 <DIO_set_port_direction+0x84>
else if( port_direction>DIO_Max_port_direction )
{
	error_state = 1;
}
else{
     switch(port_NB){
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3d 83       	std	Y+5, r19	; 0x05
    1148:	2c 83       	std	Y+4, r18	; 0x04
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	d1 f0       	breq	.+52     	; 0x1188 <DIO_set_port_direction+0x68>
    1154:	2c 81       	ldd	r18, Y+4	; 0x04
    1156:	3d 81       	ldd	r19, Y+5	; 0x05
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	2c f4       	brge	.+10     	; 0x1168 <DIO_set_port_direction+0x48>
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	61 f0       	breq	.+24     	; 0x117e <DIO_set_port_direction+0x5e>
    1166:	1e c0       	rjmp	.+60     	; 0x11a4 <DIO_set_port_direction+0x84>
    1168:	2c 81       	ldd	r18, Y+4	; 0x04
    116a:	3d 81       	ldd	r19, Y+5	; 0x05
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	81 f0       	breq	.+32     	; 0x1192 <DIO_set_port_direction+0x72>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	81 f0       	breq	.+32     	; 0x119c <DIO_set_port_direction+0x7c>
    117c:	13 c0       	rjmp	.+38     	; 0x11a4 <DIO_set_port_direction+0x84>
      case Group_A:
    	  DIO_U8_DDRA = port_direction;
    117e:	ea e3       	ldi	r30, 0x3A	; 58
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	80 83       	st	Z, r24
    1186:	0e c0       	rjmp	.+28     	; 0x11a4 <DIO_set_port_direction+0x84>
	   break;
	   case Group_B:
		   DIO_U8_DDRB = port_direction;
    1188:	e7 e3       	ldi	r30, 0x37	; 55
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	80 83       	st	Z, r24
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <DIO_set_port_direction+0x84>
	   break;
     case Group_C:
    	 DIO_U8_DDRC = port_direction;
    1192:	e4 e3       	ldi	r30, 0x34	; 52
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	80 83       	st	Z, r24
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <DIO_set_port_direction+0x84>
	   break;
     case Group_D:
    	 DIO_U8_DDRD = port_direction;
    119c:	e1 e3       	ldi	r30, 0x31	; 49
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	80 83       	st	Z, r24
	   break;
     }
}


return error_state;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <DIO_get_pin_value>:



U8 DIO_get_pin_value(U8 port_NB,U8  pin_NB,U8 * pin_value)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	27 97       	sbiw	r28, 0x07	; 7
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	6b 83       	std	Y+3, r22	; 0x03
    11ce:	5d 83       	std	Y+5, r21	; 0x05
    11d0:	4c 83       	std	Y+4, r20	; 0x04
U8 error_state = 0;
    11d2:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	84 30       	cpi	r24, 0x04	; 4
    11d8:	18 f0       	brcs	.+6      	; 0x11e0 <DIO_get_pin_value+0x2a>
{
	error_state = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	76 c0       	rjmp	.+236    	; 0x12cc <DIO_get_pin_value+0x116>
}
else if(pin_NB>=DIO_Max_pin_NB)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	88 30       	cpi	r24, 0x08	; 8
    11e4:	18 f0       	brcs	.+6      	; 0x11ec <DIO_get_pin_value+0x36>
{
	error_state = 1;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	70 c0       	rjmp	.+224    	; 0x12cc <DIO_get_pin_value+0x116>
}

else{
     switch(port_NB){
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3f 83       	std	Y+7, r19	; 0x07
    11f4:	2e 83       	std	Y+6, r18	; 0x06
    11f6:	4e 81       	ldd	r20, Y+6	; 0x06
    11f8:	5f 81       	ldd	r21, Y+7	; 0x07
    11fa:	41 30       	cpi	r20, 0x01	; 1
    11fc:	51 05       	cpc	r21, r1
    11fe:	59 f1       	breq	.+86     	; 0x1256 <DIO_get_pin_value+0xa0>
    1200:	8e 81       	ldd	r24, Y+6	; 0x06
    1202:	9f 81       	ldd	r25, Y+7	; 0x07
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	91 05       	cpc	r25, r1
    1208:	34 f4       	brge	.+12     	; 0x1216 <DIO_get_pin_value+0x60>
    120a:	2e 81       	ldd	r18, Y+6	; 0x06
    120c:	3f 81       	ldd	r19, Y+7	; 0x07
    120e:	21 15       	cp	r18, r1
    1210:	31 05       	cpc	r19, r1
    1212:	69 f0       	breq	.+26     	; 0x122e <DIO_get_pin_value+0x78>
    1214:	5b c0       	rjmp	.+182    	; 0x12cc <DIO_get_pin_value+0x116>
    1216:	4e 81       	ldd	r20, Y+6	; 0x06
    1218:	5f 81       	ldd	r21, Y+7	; 0x07
    121a:	42 30       	cpi	r20, 0x02	; 2
    121c:	51 05       	cpc	r21, r1
    121e:	79 f1       	breq	.+94     	; 0x127e <DIO_get_pin_value+0xc8>
    1220:	8e 81       	ldd	r24, Y+6	; 0x06
    1222:	9f 81       	ldd	r25, Y+7	; 0x07
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	91 05       	cpc	r25, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <DIO_get_pin_value+0x76>
    122a:	3d c0       	rjmp	.+122    	; 0x12a6 <DIO_get_pin_value+0xf0>
    122c:	4f c0       	rjmp	.+158    	; 0x12cc <DIO_get_pin_value+0x116>
      case Group_A:
    	  * pin_value = get_bit(DIO_U8_PINA,pin_NB);
    122e:	e9 e3       	ldi	r30, 0x39	; 57
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a9 01       	movw	r20, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_get_pin_value+0x90>
    1242:	55 95       	asr	r21
    1244:	47 95       	ror	r20
    1246:	8a 95       	dec	r24
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_get_pin_value+0x8c>
    124a:	ca 01       	movw	r24, r20
    124c:	81 70       	andi	r24, 0x01	; 1
    124e:	ec 81       	ldd	r30, Y+4	; 0x04
    1250:	fd 81       	ldd	r31, Y+5	; 0x05
    1252:	80 83       	st	Z, r24
    1254:	3b c0       	rjmp	.+118    	; 0x12cc <DIO_get_pin_value+0x116>
	   break;
	   case Group_B:
		   * pin_value=get_bit(DIO_U8_PINB,pin_NB);
    1256:	e6 e3       	ldi	r30, 0x36	; 54
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a9 01       	movw	r20, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_get_pin_value+0xb8>
    126a:	55 95       	asr	r21
    126c:	47 95       	ror	r20
    126e:	8a 95       	dec	r24
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_get_pin_value+0xb4>
    1272:	ca 01       	movw	r24, r20
    1274:	81 70       	andi	r24, 0x01	; 1
    1276:	ec 81       	ldd	r30, Y+4	; 0x04
    1278:	fd 81       	ldd	r31, Y+5	; 0x05
    127a:	80 83       	st	Z, r24
    127c:	27 c0       	rjmp	.+78     	; 0x12cc <DIO_get_pin_value+0x116>
	   break;
     case Group_C:
    	 * pin_value=get_bit(DIO_U8_PINC,pin_NB);
    127e:	e3 e3       	ldi	r30, 0x33	; 51
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_get_pin_value+0xe0>
    1292:	55 95       	asr	r21
    1294:	47 95       	ror	r20
    1296:	8a 95       	dec	r24
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_get_pin_value+0xdc>
    129a:	ca 01       	movw	r24, r20
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	ec 81       	ldd	r30, Y+4	; 0x04
    12a0:	fd 81       	ldd	r31, Y+5	; 0x05
    12a2:	80 83       	st	Z, r24
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <DIO_get_pin_value+0x116>
	   break;
     case Group_D:
    	 * pin_value=get_bit(DIO_U8_PIND,pin_NB);
    12a6:	e0 e3       	ldi	r30, 0x30	; 48
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_get_pin_value+0x108>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_get_pin_value+0x104>
    12c2:	ca 01       	movw	r24, r20
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	ec 81       	ldd	r30, Y+4	; 0x04
    12c8:	fd 81       	ldd	r31, Y+5	; 0x05
    12ca:	80 83       	st	Z, r24
	   break;
     }

}
return error_state;
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ce:	27 96       	adiw	r28, 0x07	; 7
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <I2C_MASTER_INIT>:
#include"std_types.h"
#include"I2C_private.h"
#include"I2C_interface.h"

void I2C_MASTER_INIT(void)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
	//FREQ 20HZ
   TWSR = 0b00000000;
    12e8:	e1 e2       	ldi	r30, 0x21	; 33
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	10 82       	st	Z, r1
   TWBR = 192;
    12ee:	e0 e2       	ldi	r30, 0x20	; 32
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 ec       	ldi	r24, 0xC0	; 192
    12f4:	80 83       	st	Z, r24
}
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <I2C_START>:

void I2C_START(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
//CLEAR INTERuptT FLAGH BIT 7  //NACK BIT 6 //GRNERAT STARTY CONDITION BIT 5
//BIT 4 STOP CONDTION ,// WRITE COLLICION FLAG CHECK THE COLLISION 3
// TWI ENABLE FLAG (ENABLE I2C)2// BIT 1 RESERVED //BIT 0 INTERRUPT TWI ENABLE
  TWCR = 0B10100100;
    1304:	e6 e5       	ldi	r30, 0x56	; 86
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	84 ea       	ldi	r24, 0xA4	; 164
    130a:	80 83       	st	Z, r24
  while (get_bit(TWCR,7)==0);
    130c:	e6 e5       	ldi	r30, 0x56	; 86
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	88 23       	and	r24, r24
    1314:	dc f7       	brge	.-10     	; 0x130c <I2C_START+0x10>
}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <I2C_MASTER_TRANSMIT>:

void I2C_MASTER_TRANSMIT(U8 data)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	0f 92       	push	r0
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	89 83       	std	Y+1, r24	; 0x01
   TWDR = data ;
    1328:	e3 e2       	ldi	r30, 0x23	; 35
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	80 83       	st	Z, r24
   //interrupt enable clear flag and start next condition bit 7
   // and disable start condition  by bit 5
   TWCR = 0b10000100;
    1330:	e6 e5       	ldi	r30, 0x56	; 86
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	84 e8       	ldi	r24, 0x84	; 132
    1336:	80 83       	st	Z, r24
   while (get_bit(TWCR,7)==0);
    1338:	e6 e5       	ldi	r30, 0x56	; 86
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	88 23       	and	r24, r24
    1340:	dc f7       	brge	.-10     	; 0x1338 <I2C_MASTER_TRANSMIT+0x1c>
}
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <I2C_STOP>:

void I2C_STOP(void)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	//GENERATE STOP BU BIT 4// STILL ENABLE INTERRUPT BY BIT 2 // CLEAR INTERUUPT FLAG BY BIT 7
	TWCR = 0b10010100;
    1352:	e6 e5       	ldi	r30, 0x56	; 86
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	84 e9       	ldi	r24, 0x94	; 148
    1358:	80 83       	st	Z, r24
	while(get_bit(TWCR,4)==1);
    135a:	e6 e5       	ldi	r30, 0x56	; 86
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	82 95       	swap	r24
    1362:	8f 70       	andi	r24, 0x0F	; 15
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	88 23       	and	r24, r24
    136e:	a9 f7       	brne	.-22     	; 0x135a <I2C_STOP+0x10>
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <I2C_MASTER_RECIEVE_ACK>:

U8 I2C_MASTER_RECIEVE_ACK(void)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	//ACK ENABLE BIT 6
	TWCR = 0b11000100;
    137e:	e6 e5       	ldi	r30, 0x56	; 86
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	84 ec       	ldi	r24, 0xC4	; 196
    1384:	80 83       	st	Z, r24
	while(get_bit(TWCR,7)==0);
    1386:	e6 e5       	ldi	r30, 0x56	; 86
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 23       	and	r24, r24
    138e:	dc f7       	brge	.-10     	; 0x1386 <I2C_MASTER_RECIEVE_ACK+0x10>
	return TWDR;
    1390:	e3 e2       	ldi	r30, 0x23	; 35
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <I2C_MASTER_RECIEVE_NACK>:


U8 I2C_MASTER_RECIEVE_NACK(void)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	//NACK ENABLE BIT 6
	TWCR = 0b10000100;
    13a4:	e6 e5       	ldi	r30, 0x56	; 86
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	84 e8       	ldi	r24, 0x84	; 132
    13aa:	80 83       	st	Z, r24
	while(get_bit(TWCR,7)==0);
    13ac:	e6 e5       	ldi	r30, 0x56	; 86
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	88 23       	and	r24, r24
    13b4:	dc f7       	brge	.-10     	; 0x13ac <I2C_MASTER_RECIEVE_NACK+0x10>
	return TWDR;
    13b6:	e3 e2       	ldi	r30, 0x23	; 35
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <I2C_INIT_SLAVE>:

void I2C_INIT_SLAVE(U8 slave_address)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	89 83       	std	Y+1, r24	; 0x01
	TWAR =slave_address;
    13ce:	e2 e2       	ldi	r30, 0x22	; 34
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	80 83       	st	Z, r24
	//ENABLE I2C
	//ACK
	//CLEAR INTERRUPT FLAG  //AND ENABLE TO NEXT OPERATION
	TWCR = 0b011000100;
    13d6:	e6 e5       	ldi	r30, 0x56	; 86
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	84 ec       	ldi	r24, 0xC4	; 196
    13dc:	80 83       	st	Z, r24
}
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <I2C_SLAVE_LISTEN>:
void I2C_SLAVE_LISTEN(void)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	while(get_bit(TWCR,7)==0);
    13ee:	e6 e5       	ldi	r30, 0x56	; 86
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 23       	and	r24, r24
    13f6:	dc f7       	brge	.-10     	; 0x13ee <I2C_SLAVE_LISTEN+0x8>
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <I2C_SLAVE_TRANSMIT>:

void I2C_SLAVE_TRANSMIT(U8 data)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    140a:	e3 e2       	ldi	r30, 0x23	; 35
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	80 83       	st	Z, r24
	TWCR= 0b10000100;
    1412:	e6 e5       	ldi	r30, 0x56	; 86
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	84 e8       	ldi	r24, 0x84	; 132
    1418:	80 83       	st	Z, r24
	while(get_bit(TWCR,7)==0);
    141a:	e6 e5       	ldi	r30, 0x56	; 86
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	88 23       	and	r24, r24
    1422:	dc f7       	brge	.-10     	; 0x141a <I2C_SLAVE_TRANSMIT+0x1c>
}
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <I2C_SLAVE_RECIEVE_ACK>:


U8 I2C_SLAVE_RECIEVE_ACK(void)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	//ACK ENABLE BIT 6
	TWCR = 0b11000100;
    1434:	e6 e5       	ldi	r30, 0x56	; 86
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	84 ec       	ldi	r24, 0xC4	; 196
    143a:	80 83       	st	Z, r24
	while(get_bit(TWCR,7)==0);
    143c:	e6 e5       	ldi	r30, 0x56	; 86
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	88 23       	and	r24, r24
    1444:	dc f7       	brge	.-10     	; 0x143c <I2C_SLAVE_RECIEVE_ACK+0x10>
	return TWDR;
    1446:	e3 e2       	ldi	r30, 0x23	; 35
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
}
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <I2C_SLAVE_RECIEVE_NACK>:

U8 I2C_SLAVE_RECIEVE_NACK(void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	//NACK ENABLE BIT 6
	TWCR = 0b10000100;
    145a:	e6 e5       	ldi	r30, 0x56	; 86
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	84 e8       	ldi	r24, 0x84	; 132
    1460:	80 83       	st	Z, r24
	while(get_bit(TWCR,7)==0);
    1462:	e6 e5       	ldi	r30, 0x56	; 86
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	88 23       	and	r24, r24
    146a:	dc f7       	brge	.-10     	; 0x1462 <I2C_SLAVE_RECIEVE_NACK+0x10>
	return TWDR;
    146c:	e3 e2       	ldi	r30, 0x23	; 35
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <LCD_write_cmd>:
#include "LCD_private.h"
#include "LCD_interface.h"

 U8 * num1;
void LCD_write_cmd(U8 cmd)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	0f 92       	push	r0
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	89 83       	std	Y+1, r24	; 0x01
    DIO_set_pin_value(LCD_control_port, LCD_rs_pin, DIO_Low );
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_set_pin_value>
	LCD_write(cmd);
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_write>
}
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <LCD_write_data>:

void LCD_write_data(U8 data)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
    DIO_set_pin_value( LCD_control_port, LCD_rs_pin, DIO_High );
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    14ae:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_set_pin_value>
	LCD_write(data);
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <LCD_write>
}
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <LCD_write>:


void LCD_write(U8 value)
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	61 97       	sbiw	r28, 0x11	; 17
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	89 8b       	std	Y+17, r24	; 0x11
	DIO_set_pin_value(LCD_control_port,LCD_rw_pin, DIO_Low );
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	61 e0       	ldi	r22, 0x01	; 1
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_set_pin_value>

	for(int i=0;i<8;i++)
    14e0:	18 8a       	std	Y+16, r1	; 0x10
    14e2:	1f 86       	std	Y+15, r1	; 0x0f
    14e4:	16 c0       	rjmp	.+44     	; 0x1512 <LCD_write+0x52>
	{
		DIO_set_pin_value(LCD_data_port, i , get_bit( value,i));
    14e6:	2f 85       	ldd	r18, Y+15	; 0x0f
    14e8:	89 89       	ldd	r24, Y+17	; 0x11
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0f 84       	ldd	r0, Y+15	; 0x0f
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <LCD_write+0x36>
    14f2:	95 95       	asr	r25
    14f4:	87 95       	ror	r24
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <LCD_write+0x32>
    14fa:	98 2f       	mov	r25, r24
    14fc:	91 70       	andi	r25, 0x01	; 1
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	62 2f       	mov	r22, r18
    1502:	49 2f       	mov	r20, r25
    1504:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_set_pin_value>

void LCD_write(U8 value)
{
	DIO_set_pin_value(LCD_control_port,LCD_rw_pin, DIO_Low );

	for(int i=0;i<8;i++)
    1508:	8f 85       	ldd	r24, Y+15	; 0x0f
    150a:	98 89       	ldd	r25, Y+16	; 0x10
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	98 8b       	std	Y+16, r25	; 0x10
    1510:	8f 87       	std	Y+15, r24	; 0x0f
    1512:	8f 85       	ldd	r24, Y+15	; 0x0f
    1514:	98 89       	ldd	r25, Y+16	; 0x10
    1516:	88 30       	cpi	r24, 0x08	; 8
    1518:	91 05       	cpc	r25, r1
    151a:	2c f3       	brlt	.-54     	; 0x14e6 <LCD_write+0x26>
	{
		DIO_set_pin_value(LCD_data_port, i , get_bit( value,i));

	}

	DIO_set_pin_value(LCD_control_port,LCD_E_pin, DIO_High);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	62 e0       	ldi	r22, 0x02	; 2
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_set_pin_value>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e8       	ldi	r26, 0x80	; 128
    152c:	bf e3       	ldi	r27, 0x3F	; 63
    152e:	8b 87       	std	Y+11, r24	; 0x0b
    1530:	9c 87       	std	Y+12, r25	; 0x0c
    1532:	ad 87       	std	Y+13, r26	; 0x0d
    1534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	6b 85       	ldd	r22, Y+11	; 0x0b
    1538:	7c 85       	ldd	r23, Y+12	; 0x0c
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4a ef       	ldi	r20, 0xFA	; 250
    1544:	54 e4       	ldi	r21, 0x44	; 68
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	8f 83       	std	Y+7, r24	; 0x07
    1550:	98 87       	std	Y+8, r25	; 0x08
    1552:	a9 87       	std	Y+9, r26	; 0x09
    1554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1556:	6f 81       	ldd	r22, Y+7	; 0x07
    1558:	78 85       	ldd	r23, Y+8	; 0x08
    155a:	89 85       	ldd	r24, Y+9	; 0x09
    155c:	9a 85       	ldd	r25, Y+10	; 0x0a
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	5f e3       	ldi	r21, 0x3F	; 63
    1566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    156a:	88 23       	and	r24, r24
    156c:	2c f4       	brge	.+10     	; 0x1578 <LCD_write+0xb8>
		__ticks = 1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
    1576:	3f c0       	rjmp	.+126    	; 0x15f6 <LCD_write+0x136>
	else if (__tmp > 65535)
    1578:	6f 81       	ldd	r22, Y+7	; 0x07
    157a:	78 85       	ldd	r23, Y+8	; 0x08
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	57 e4       	ldi	r21, 0x47	; 71
    1588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158c:	18 16       	cp	r1, r24
    158e:	4c f5       	brge	.+82     	; 0x15e2 <LCD_write+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	6b 85       	ldd	r22, Y+11	; 0x0b
    1592:	7c 85       	ldd	r23, Y+12	; 0x0c
    1594:	8d 85       	ldd	r24, Y+13	; 0x0d
    1596:	9e 85       	ldd	r25, Y+14	; 0x0e
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <LCD_write+0x118>
    15ba:	88 ec       	ldi	r24, 0xC8	; 200
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_write+0x106>
    15ca:	9c 83       	std	Y+4, r25	; 0x04
    15cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f7       	brne	.-38     	; 0x15ba <LCD_write+0xfa>
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <LCD_write+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	6f 81       	ldd	r22, Y+7	; 0x07
    15e4:	78 85       	ldd	r23, Y+8	; 0x08
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	8d 83       	std	Y+5, r24	; 0x05
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_write+0x142>
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_set_pin_value(LCD_control_port,LCD_E_pin,  DIO_Low);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_set_pin_value>
}
    1614:	61 96       	adiw	r28, 0x11	; 17
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <LCD_initial>:

void LCD_initial(void)
{
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	cc 54       	subi	r28, 0x4C	; 76
    1634:	d0 40       	sbci	r29, 0x00	; 0
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
	DIO_set_port_direction(LCD_data_port, DIO_Max_port_direction);
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	6f ef       	ldi	r22, 0xFF	; 255
    1644:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_set_port_direction>

	DIO_set_pin_direction(LCD_control_port ,LCD_rs_pin ,DIO_Output);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_set_pin_direction>

    DIO_set_pin_direction(LCD_control_port,LCD_rw_pin,DIO_Output);
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	41 e0       	ldi	r20, 0x01	; 1
    1658:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_set_pin_direction>

    DIO_set_pin_direction(LCD_control_port,LCD_E_pin,DIO_Output);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	62 e0       	ldi	r22, 0x02	; 2
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_set_pin_direction>
    1666:	fe 01       	movw	r30, r28
    1668:	e7 5b       	subi	r30, 0xB7	; 183
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e2       	ldi	r26, 0x20	; 32
    1672:	b2 e4       	ldi	r27, 0x42	; 66
    1674:	80 83       	st	Z, r24
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	a2 83       	std	Z+2, r26	; 0x02
    167a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	8e 01       	movw	r16, r28
    167e:	0b 5b       	subi	r16, 0xBB	; 187
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	fe 01       	movw	r30, r28
    1684:	e7 5b       	subi	r30, 0xB7	; 183
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	f8 01       	movw	r30, r16
    16a2:	80 83       	st	Z, r24
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	a2 83       	std	Z+2, r26	; 0x02
    16a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16aa:	fe 01       	movw	r30, r28
    16ac:	eb 5b       	subi	r30, 0xBB	; 187
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	44 f4       	brge	.+16     	; 0x16d8 <LCD_initial+0xb2>
		__ticks = 1;
    16c8:	fe 01       	movw	r30, r28
    16ca:	ed 5b       	subi	r30, 0xBD	; 189
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	80 83       	st	Z, r24
    16d6:	64 c0       	rjmp	.+200    	; 0x17a0 <LCD_initial+0x17a>
	else if (__tmp > 65535)
    16d8:	fe 01       	movw	r30, r28
    16da:	eb 5b       	subi	r30, 0xBB	; 187
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	0c f0       	brlt	.+2      	; 0x16f8 <LCD_initial+0xd2>
    16f6:	43 c0       	rjmp	.+134    	; 0x177e <LCD_initial+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	fe 01       	movw	r30, r28
    16fa:	e7 5b       	subi	r30, 0xB7	; 183
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	60 81       	ld	r22, Z
    1700:	71 81       	ldd	r23, Z+1	; 0x01
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	93 81       	ldd	r25, Z+3	; 0x03
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	8e 01       	movw	r16, r28
    1718:	0d 5b       	subi	r16, 0xBD	; 189
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	f8 01       	movw	r30, r16
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	80 83       	st	Z, r24
    172e:	1f c0       	rjmp	.+62     	; 0x176e <LCD_initial+0x148>
    1730:	fe 01       	movw	r30, r28
    1732:	ef 5b       	subi	r30, 0xBF	; 191
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	88 ec       	ldi	r24, 0xC8	; 200
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	80 83       	st	Z, r24
    173e:	fe 01       	movw	r30, r28
    1740:	ef 5b       	subi	r30, 0xBF	; 191
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_initial+0x122>
    174c:	fe 01       	movw	r30, r28
    174e:	ef 5b       	subi	r30, 0xBF	; 191
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1756:	de 01       	movw	r26, r28
    1758:	ad 5b       	subi	r26, 0xBD	; 189
    175a:	bf 4f       	sbci	r27, 0xFF	; 255
    175c:	fe 01       	movw	r30, r28
    175e:	ed 5b       	subi	r30, 0xBD	; 189
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	11 96       	adiw	r26, 0x01	; 1
    176a:	9c 93       	st	X, r25
    176c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	fe 01       	movw	r30, r28
    1770:	ed 5b       	subi	r30, 0xBD	; 189
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	d1 f6       	brne	.-76     	; 0x1730 <LCD_initial+0x10a>
    177c:	24 c0       	rjmp	.+72     	; 0x17c6 <LCD_initial+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177e:	8e 01       	movw	r16, r28
    1780:	0d 5b       	subi	r16, 0xBD	; 189
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	fe 01       	movw	r30, r28
    1786:	eb 5b       	subi	r30, 0xBB	; 187
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	f8 01       	movw	r30, r16
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
    17a0:	fe 01       	movw	r30, r28
    17a2:	ed 5b       	subi	r30, 0xBD	; 189
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	fe 01       	movw	r30, r28
    17ac:	ff 96       	adiw	r30, 0x3f	; 63
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	80 83       	st	Z, r24
    17b2:	fe 01       	movw	r30, r28
    17b4:	ff 96       	adiw	r30, 0x3f	; 63
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <LCD_initial+0x194>
    17be:	fe 01       	movw	r30, r28
    17c0:	ff 96       	adiw	r30, 0x3f	; 63
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	80 83       	st	Z, r24

    _delay_ms(40);
    LCD_write_cmd(0b00111000);
    17c6:	88 e3       	ldi	r24, 0x38	; 56
    17c8:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_write_cmd>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a8 e4       	ldi	r26, 0x48	; 72
    17d2:	b2 e4       	ldi	r27, 0x42	; 66
    17d4:	8b af       	std	Y+59, r24	; 0x3b
    17d6:	9c af       	std	Y+60, r25	; 0x3c
    17d8:	ad af       	std	Y+61, r26	; 0x3d
    17da:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17dc:	6b ad       	ldd	r22, Y+59	; 0x3b
    17de:	7c ad       	ldd	r23, Y+60	; 0x3c
    17e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e4:	2b ea       	ldi	r18, 0xAB	; 171
    17e6:	3a ea       	ldi	r19, 0xAA	; 170
    17e8:	4a e2       	ldi	r20, 0x2A	; 42
    17ea:	50 e4       	ldi	r21, 0x40	; 64
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8f ab       	std	Y+55, r24	; 0x37
    17f6:	98 af       	std	Y+56, r25	; 0x38
    17f8:	a9 af       	std	Y+57, r26	; 0x39
    17fa:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17fc:	6f a9       	ldd	r22, Y+55	; 0x37
    17fe:	78 ad       	ldd	r23, Y+56	; 0x38
    1800:	89 ad       	ldd	r24, Y+57	; 0x39
    1802:	9a ad       	ldd	r25, Y+58	; 0x3a
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	1c f4       	brge	.+6      	; 0x181a <LCD_initial+0x1f4>
		__ticks = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	8e ab       	std	Y+54, r24	; 0x36
    1818:	91 c0       	rjmp	.+290    	; 0x193c <LCD_initial+0x316>
	else if (__tmp > 255)
    181a:	6f a9       	ldd	r22, Y+55	; 0x37
    181c:	78 ad       	ldd	r23, Y+56	; 0x38
    181e:	89 ad       	ldd	r24, Y+57	; 0x39
    1820:	9a ad       	ldd	r25, Y+58	; 0x3a
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	53 e4       	ldi	r21, 0x43	; 67
    182a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    182e:	18 16       	cp	r1, r24
    1830:	0c f0       	brlt	.+2      	; 0x1834 <LCD_initial+0x20e>
    1832:	7b c0       	rjmp	.+246    	; 0x192a <LCD_initial+0x304>
	{
		_delay_ms(__us / 1000.0);
    1834:	6b ad       	ldd	r22, Y+59	; 0x3b
    1836:	7c ad       	ldd	r23, Y+60	; 0x3c
    1838:	8d ad       	ldd	r24, Y+61	; 0x3d
    183a:	9e ad       	ldd	r25, Y+62	; 0x3e
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	4a e7       	ldi	r20, 0x7A	; 122
    1842:	54 e4       	ldi	r21, 0x44	; 68
    1844:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	8a ab       	std	Y+50, r24	; 0x32
    184e:	9b ab       	std	Y+51, r25	; 0x33
    1850:	ac ab       	std	Y+52, r26	; 0x34
    1852:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6a a9       	ldd	r22, Y+50	; 0x32
    1856:	7b a9       	ldd	r23, Y+51	; 0x33
    1858:	8c a9       	ldd	r24, Y+52	; 0x34
    185a:	9d a9       	ldd	r25, Y+53	; 0x35
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a ef       	ldi	r20, 0xFA	; 250
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8e a7       	std	Y+46, r24	; 0x2e
    186e:	9f a7       	std	Y+47, r25	; 0x2f
    1870:	a8 ab       	std	Y+48, r26	; 0x30
    1872:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1874:	6e a5       	ldd	r22, Y+46	; 0x2e
    1876:	7f a5       	ldd	r23, Y+47	; 0x2f
    1878:	88 a9       	ldd	r24, Y+48	; 0x30
    187a:	99 a9       	ldd	r25, Y+49	; 0x31
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_initial+0x270>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9d a7       	std	Y+45, r25	; 0x2d
    1892:	8c a7       	std	Y+44, r24	; 0x2c
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <LCD_initial+0x2ee>
	else if (__tmp > 65535)
    1896:	6e a5       	ldd	r22, Y+46	; 0x2e
    1898:	7f a5       	ldd	r23, Y+47	; 0x2f
    189a:	88 a9       	ldd	r24, Y+48	; 0x30
    189c:	99 a9       	ldd	r25, Y+49	; 0x31
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <LCD_initial+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6a a9       	ldd	r22, Y+50	; 0x32
    18b0:	7b a9       	ldd	r23, Y+51	; 0x33
    18b2:	8c a9       	ldd	r24, Y+52	; 0x34
    18b4:	9d a9       	ldd	r25, Y+53	; 0x35
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9d a7       	std	Y+45, r25	; 0x2d
    18d4:	8c a7       	std	Y+44, r24	; 0x2c
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_initial+0x2d0>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9b a7       	std	Y+43, r25	; 0x2b
    18de:	8a a7       	std	Y+42, r24	; 0x2a
    18e0:	8a a5       	ldd	r24, Y+42	; 0x2a
    18e2:	9b a5       	ldd	r25, Y+43	; 0x2b
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_initial+0x2be>
    18e8:	9b a7       	std	Y+43, r25	; 0x2b
    18ea:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    18ee:	9d a5       	ldd	r25, Y+45	; 0x2d
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9d a7       	std	Y+45, r25	; 0x2d
    18f4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    18f8:	9d a5       	ldd	r25, Y+45	; 0x2d
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_initial+0x2b2>
    18fe:	24 c0       	rjmp	.+72     	; 0x1948 <LCD_initial+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6e a5       	ldd	r22, Y+46	; 0x2e
    1902:	7f a5       	ldd	r23, Y+47	; 0x2f
    1904:	88 a9       	ldd	r24, Y+48	; 0x30
    1906:	99 a9       	ldd	r25, Y+49	; 0x31
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9d a7       	std	Y+45, r25	; 0x2d
    1912:	8c a7       	std	Y+44, r24	; 0x2c
    1914:	8c a5       	ldd	r24, Y+44	; 0x2c
    1916:	9d a5       	ldd	r25, Y+45	; 0x2d
    1918:	99 a7       	std	Y+41, r25	; 0x29
    191a:	88 a7       	std	Y+40, r24	; 0x28
    191c:	88 a5       	ldd	r24, Y+40	; 0x28
    191e:	99 a5       	ldd	r25, Y+41	; 0x29
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_initial+0x2fa>
    1924:	99 a7       	std	Y+41, r25	; 0x29
    1926:	88 a7       	std	Y+40, r24	; 0x28
    1928:	0f c0       	rjmp	.+30     	; 0x1948 <LCD_initial+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    192a:	6f a9       	ldd	r22, Y+55	; 0x37
    192c:	78 ad       	ldd	r23, Y+56	; 0x38
    192e:	89 ad       	ldd	r24, Y+57	; 0x39
    1930:	9a ad       	ldd	r25, Y+58	; 0x3a
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	8e ab       	std	Y+54, r24	; 0x36
    193c:	8e a9       	ldd	r24, Y+54	; 0x36
    193e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1940:	8f a1       	ldd	r24, Y+39	; 0x27
    1942:	8a 95       	dec	r24
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_initial+0x31c>
    1946:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(50);
    LCD_write_cmd(0b00001100);
    1948:	8c e0       	ldi	r24, 0x0C	; 12
    194a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_write_cmd>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a8 e4       	ldi	r26, 0x48	; 72
    1954:	b2 e4       	ldi	r27, 0x42	; 66
    1956:	8b a3       	std	Y+35, r24	; 0x23
    1958:	9c a3       	std	Y+36, r25	; 0x24
    195a:	ad a3       	std	Y+37, r26	; 0x25
    195c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    195e:	6b a1       	ldd	r22, Y+35	; 0x23
    1960:	7c a1       	ldd	r23, Y+36	; 0x24
    1962:	8d a1       	ldd	r24, Y+37	; 0x25
    1964:	9e a1       	ldd	r25, Y+38	; 0x26
    1966:	2b ea       	ldi	r18, 0xAB	; 171
    1968:	3a ea       	ldi	r19, 0xAA	; 170
    196a:	4a e2       	ldi	r20, 0x2A	; 42
    196c:	50 e4       	ldi	r21, 0x40	; 64
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	8f 8f       	std	Y+31, r24	; 0x1f
    1978:	98 a3       	std	Y+32, r25	; 0x20
    197a:	a9 a3       	std	Y+33, r26	; 0x21
    197c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    197e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1980:	78 a1       	ldd	r23, Y+32	; 0x20
    1982:	89 a1       	ldd	r24, Y+33	; 0x21
    1984:	9a a1       	ldd	r25, Y+34	; 0x22
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	1c f4       	brge	.+6      	; 0x199c <LCD_initial+0x376>
		__ticks = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	8e 8f       	std	Y+30, r24	; 0x1e
    199a:	91 c0       	rjmp	.+290    	; 0x1abe <LCD_initial+0x498>
	else if (__tmp > 255)
    199c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    199e:	78 a1       	ldd	r23, Y+32	; 0x20
    19a0:	89 a1       	ldd	r24, Y+33	; 0x21
    19a2:	9a a1       	ldd	r25, Y+34	; 0x22
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	53 e4       	ldi	r21, 0x43	; 67
    19ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	0c f0       	brlt	.+2      	; 0x19b6 <LCD_initial+0x390>
    19b4:	7b c0       	rjmp	.+246    	; 0x1aac <LCD_initial+0x486>
	{
		_delay_ms(__us / 1000.0);
    19b6:	6b a1       	ldd	r22, Y+35	; 0x23
    19b8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ba:	8d a1       	ldd	r24, Y+37	; 0x25
    19bc:	9e a1       	ldd	r25, Y+38	; 0x26
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a e7       	ldi	r20, 0x7A	; 122
    19c4:	54 e4       	ldi	r21, 0x44	; 68
    19c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	8a 8f       	std	Y+26, r24	; 0x1a
    19d0:	9b 8f       	std	Y+27, r25	; 0x1b
    19d2:	ac 8f       	std	Y+28, r26	; 0x1c
    19d4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19d8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	4a ef       	ldi	r20, 0xFA	; 250
    19e4:	54 e4       	ldi	r21, 0x44	; 68
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8e 8b       	std	Y+22, r24	; 0x16
    19f0:	9f 8b       	std	Y+23, r25	; 0x17
    19f2:	a8 8f       	std	Y+24, r26	; 0x18
    19f4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19f6:	6e 89       	ldd	r22, Y+22	; 0x16
    19f8:	7f 89       	ldd	r23, Y+23	; 0x17
    19fa:	88 8d       	ldd	r24, Y+24	; 0x18
    19fc:	99 8d       	ldd	r25, Y+25	; 0x19
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5f e3       	ldi	r21, 0x3F	; 63
    1a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a0a:	88 23       	and	r24, r24
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <LCD_initial+0x3f2>
		__ticks = 1;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9d 8b       	std	Y+21, r25	; 0x15
    1a14:	8c 8b       	std	Y+20, r24	; 0x14
    1a16:	3f c0       	rjmp	.+126    	; 0x1a96 <LCD_initial+0x470>
	else if (__tmp > 65535)
    1a18:	6e 89       	ldd	r22, Y+22	; 0x16
    1a1a:	7f 89       	ldd	r23, Y+23	; 0x17
    1a1c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a1e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	4c f5       	brge	.+82     	; 0x1a82 <LCD_initial+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a32:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a36:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e2       	ldi	r20, 0x20	; 32
    1a3e:	51 e4       	ldi	r21, 0x41	; 65
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9d 8b       	std	Y+21, r25	; 0x15
    1a56:	8c 8b       	std	Y+20, r24	; 0x14
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <LCD_initial+0x452>
    1a5a:	88 ec       	ldi	r24, 0xC8	; 200
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9b 8b       	std	Y+19, r25	; 0x13
    1a60:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a62:	8a 89       	ldd	r24, Y+18	; 0x12
    1a64:	9b 89       	ldd	r25, Y+19	; 0x13
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <LCD_initial+0x440>
    1a6a:	9b 8b       	std	Y+19, r25	; 0x13
    1a6c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6e:	8c 89       	ldd	r24, Y+20	; 0x14
    1a70:	9d 89       	ldd	r25, Y+21	; 0x15
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	9d 8b       	std	Y+21, r25	; 0x15
    1a76:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a78:	8c 89       	ldd	r24, Y+20	; 0x14
    1a7a:	9d 89       	ldd	r25, Y+21	; 0x15
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	69 f7       	brne	.-38     	; 0x1a5a <LCD_initial+0x434>
    1a80:	24 c0       	rjmp	.+72     	; 0x1aca <LCD_initial+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a82:	6e 89       	ldd	r22, Y+22	; 0x16
    1a84:	7f 89       	ldd	r23, Y+23	; 0x17
    1a86:	88 8d       	ldd	r24, Y+24	; 0x18
    1a88:	99 8d       	ldd	r25, Y+25	; 0x19
    1a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9d 8b       	std	Y+21, r25	; 0x15
    1a94:	8c 8b       	std	Y+20, r24	; 0x14
    1a96:	8c 89       	ldd	r24, Y+20	; 0x14
    1a98:	9d 89       	ldd	r25, Y+21	; 0x15
    1a9a:	99 8b       	std	Y+17, r25	; 0x11
    1a9c:	88 8b       	std	Y+16, r24	; 0x10
    1a9e:	88 89       	ldd	r24, Y+16	; 0x10
    1aa0:	99 89       	ldd	r25, Y+17	; 0x11
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_initial+0x47c>
    1aa6:	99 8b       	std	Y+17, r25	; 0x11
    1aa8:	88 8b       	std	Y+16, r24	; 0x10
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <LCD_initial+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1aae:	78 a1       	ldd	r23, Y+32	; 0x20
    1ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8e 8f       	std	Y+30, r24	; 0x1e
    1abe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ac0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ac2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac4:	8a 95       	dec	r24
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <LCD_initial+0x49e>
    1ac8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(50);
    LCD_write_cmd(0b00000001);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_write_cmd>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e4       	ldi	r27, 0x40	; 64
    1ad8:	8b 87       	std	Y+11, r24	; 0x0b
    1ada:	9c 87       	std	Y+12, r25	; 0x0c
    1adc:	ad 87       	std	Y+13, r26	; 0x0d
    1ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4a ef       	ldi	r20, 0xFA	; 250
    1aee:	54 e4       	ldi	r21, 0x44	; 68
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8f 83       	std	Y+7, r24	; 0x07
    1afa:	98 87       	std	Y+8, r25	; 0x08
    1afc:	a9 87       	std	Y+9, r26	; 0x09
    1afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b00:	6f 81       	ldd	r22, Y+7	; 0x07
    1b02:	78 85       	ldd	r23, Y+8	; 0x08
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e8       	ldi	r20, 0x80	; 128
    1b0e:	5f e3       	ldi	r21, 0x3F	; 63
    1b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b14:	88 23       	and	r24, r24
    1b16:	2c f4       	brge	.+10     	; 0x1b22 <LCD_initial+0x4fc>
		__ticks = 1;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	3f c0       	rjmp	.+126    	; 0x1ba0 <LCD_initial+0x57a>
	else if (__tmp > 65535)
    1b22:	6f 81       	ldd	r22, Y+7	; 0x07
    1b24:	78 85       	ldd	r23, Y+8	; 0x08
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	3f ef       	ldi	r19, 0xFF	; 255
    1b2e:	4f e7       	ldi	r20, 0x7F	; 127
    1b30:	57 e4       	ldi	r21, 0x47	; 71
    1b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	4c f5       	brge	.+82     	; 0x1b8c <LCD_initial+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e2       	ldi	r20, 0x20	; 32
    1b48:	51 e4       	ldi	r21, 0x41	; 65
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	bc 01       	movw	r22, r24
    1b54:	cd 01       	movw	r24, r26
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	0f c0       	rjmp	.+30     	; 0x1b82 <LCD_initial+0x55c>
    1b64:	88 ec       	ldi	r24, 0xC8	; 200
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_initial+0x54a>
    1b74:	9c 83       	std	Y+4, r25	; 0x04
    1b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	9e 83       	std	Y+6, r25	; 0x06
    1b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	69 f7       	brne	.-38     	; 0x1b64 <LCD_initial+0x53e>
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <LCD_initial+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	78 85       	ldd	r23, Y+8	; 0x08
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_initial+0x586>
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    1bb4:	c4 5b       	subi	r28, 0xB4	; 180
    1bb6:	df 4f       	sbci	r29, 0xFF	; 255
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	08 95       	ret

00001bcc <LCD_write_string>:

// write string
void LCD_write_string(const char * string)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <LCD_write_string+0x6>
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9b 83       	std	Y+3, r25	; 0x03
    1bda:	8a 83       	std	Y+2, r24	; 0x02
	U8 counter=0;
    1bdc:	19 82       	std	Y+1, r1	; 0x01
    1bde:	0e c0       	rjmp	.+28     	; 0x1bfc <LCD_write_string+0x30>
	while(string[counter] != '\0')
	{
		LCD_write_data(string[counter]);
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bea:	fc 01       	movw	r30, r24
    1bec:	e2 0f       	add	r30, r18
    1bee:	f3 1f       	adc	r31, r19
    1bf0:	80 81       	ld	r24, Z
    1bf2:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_write_data>
		counter++;
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	8f 5f       	subi	r24, 0xFF	; 255
    1bfa:	89 83       	std	Y+1, r24	; 0x01

// write string
void LCD_write_string(const char * string)
{
	U8 counter=0;
	while(string[counter] != '\0')
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	9b 81       	ldd	r25, Y+3	; 0x03
    1c06:	fc 01       	movw	r30, r24
    1c08:	e2 0f       	add	r30, r18
    1c0a:	f3 1f       	adc	r31, r19
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 23       	and	r24, r24
    1c10:	39 f7       	brne	.-50     	; 0x1be0 <LCD_write_string+0x14>
	{
		LCD_write_data(string[counter]);
		counter++;
	}
}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <LCD_pose_x_y>:

//shifting string possition

U8 LCD_pose_x_y(U8 x_pose,U8 y_pose)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <LCD_pose_x_y+0x6>
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <LCD_pose_x_y+0x8>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
    1c2c:	6c 83       	std	Y+4, r22	; 0x04
	U8 local_adress;
	U8 error_state=0;
    1c2e:	19 82       	std	Y+1, r1	; 0x01
	if((x_pose<2)&& (y_pose<16))
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	82 30       	cpi	r24, 0x02	; 2
    1c34:	a0 f4       	brcc	.+40     	; 0x1c5e <LCD_pose_x_y+0x40>
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	80 31       	cpi	r24, 0x10	; 16
    1c3a:	88 f4       	brcc	.+34     	; 0x1c5e <LCD_pose_x_y+0x40>
	{
	 if(x_pose==0)
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	88 23       	and	r24, r24
    1c40:	19 f4       	brne	.+6      	; 0x1c48 <LCD_pose_x_y+0x2a>
	  {
       //location at first line
		local_adress = y_pose;
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	8a 83       	std	Y+2, r24	; 0x02
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <LCD_pose_x_y+0x36>
	   }
	else if(x_pose ==1)
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	19 f4       	brne	.+6      	; 0x1c54 <LCD_pose_x_y+0x36>
	  {
	  	//location at second line
		local_adress= y_pose + 0x40;
    1c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c50:	80 5c       	subi	r24, 0xC0	; 192
    1c52:	8a 83       	std	Y+2, r24	; 0x02
	  }
	LCD_write_cmd(local_adress+128);
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	80 58       	subi	r24, 0x80	; 128
    1c58:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_write_cmd>
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <LCD_pose_x_y+0x44>
	}
	else
	{
		error_state=1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01
	}
	 return error_state;
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <LCD_write_special_character>:

void LCD_write_special_character(U8 *pattern,U8 pattern_number,U8 x_pose,U8 y_pose)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	27 97       	sbiw	r28, 0x07	; 7
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	6d 83       	std	Y+5, r22	; 0x05
    1c8c:	4e 83       	std	Y+6, r20	; 0x06
    1c8e:	2f 83       	std	Y+7, r18	; 0x07
U8 local_CGRAMADDRESS = 0;
    1c90:	1a 82       	std	Y+2, r1	; 0x02
U8 iterator;

//calculate the CGRAM address whose each block 8 bytes
local_CGRAMADDRESS = pattern_number*8;
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
LCD_write_cmd(local_CGRAMADDRESS+64);
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	80 5c       	subi	r24, 0xC0	; 192
    1caa:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_write_cmd>

// write pattern in CGRAM
for(iterator = 0;iterator<8;iterator++)
    1cae:	19 82       	std	Y+1, r1	; 0x01
    1cb0:	0e c0       	rjmp	.+28     	; 0x1cce <LCD_write_special_character+0x5c>
{
	 LCD_write_data(pattern[iterator]);
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	e2 0f       	add	r30, r18
    1cc0:	f3 1f       	adc	r31, r19
    1cc2:	80 81       	ld	r24, Z
    1cc4:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_write_data>
//calculate the CGRAM address whose each block 8 bytes
local_CGRAMADDRESS = pattern_number*8;
LCD_write_cmd(local_CGRAMADDRESS+64);

// write pattern in CGRAM
for(iterator = 0;iterator<8;iterator++)
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	88 30       	cpi	r24, 0x08	; 8
    1cd2:	78 f3       	brcs	.-34     	; 0x1cb2 <LCD_write_special_character+0x40>
{
	 LCD_write_data(pattern[iterator]);

}
//go back to DDRAM to display patter
LCD_pose_x_y(x_pose,y_pose);
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_pose_x_y>


//display the pattern write in CGRAM
LCD_write_data(pattern_number);
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_write_data>
}
    1ce2:	27 96       	adiw	r28, 0x07	; 7
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <LCD_clear>:

//function to clear the lcd
void LCD_clear(void)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	LCD_write_cmd(0b00000001);
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_write_cmd>
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <LCD_write_no>:




void LCD_write_no(U32 num){
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	6b 97       	sbiw	r28, 0x1b	; 27
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	68 8f       	std	Y+24, r22	; 0x18
    1d1e:	79 8f       	std	Y+25, r23	; 0x19
    1d20:	8a 8f       	std	Y+26, r24	; 0x1a
    1d22:	9b 8f       	std	Y+27, r25	; 0x1b

	U8 rem,arr_index=0;
    1d24:	1a 82       	std	Y+2, r1	; 0x02
	U8 length = 0;
    1d26:	19 82       	std	Y+1, r1	; 0x01
    U8 str[20];
	if(num==0){
    1d28:	88 8d       	ldd	r24, Y+24	; 0x18
    1d2a:	99 8d       	ldd	r25, Y+25	; 0x19
    1d2c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d2e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	a1 05       	cpc	r26, r1
    1d34:	b1 05       	cpc	r27, r1
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <LCD_write_no+0x32>
    1d38:	41 c0       	rjmp	.+130    	; 0x1dbc <LCD_write_no+0xb4>
		str[arr_index]='0';
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	ce 01       	movw	r24, r28
    1d42:	04 96       	adiw	r24, 0x04	; 4
    1d44:	fc 01       	movw	r30, r24
    1d46:	e2 0f       	add	r30, r18
    1d48:	f3 1f       	adc	r31, r19
    1d4a:	80 e3       	ldi	r24, 0x30	; 48
    1d4c:	80 83       	st	Z, r24
		arr_index++;
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	8a 83       	std	Y+2, r24	; 0x02
    1d54:	49 c0       	rjmp	.+146    	; 0x1de8 <LCD_write_no+0xe0>
	}
	else{
		while(num!=0){
	rem=num%10;
    1d56:	88 8d       	ldd	r24, Y+24	; 0x18
    1d58:	99 8d       	ldd	r25, Y+25	; 0x19
    1d5a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d5c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d5e:	2a e0       	ldi	r18, 0x0A	; 10
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8b 83       	std	Y+3, r24	; 0x03
	str[arr_index]=rem+'0';
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	40 5d       	subi	r20, 0xD0	; 208
    1d80:	ce 01       	movw	r24, r28
    1d82:	04 96       	adiw	r24, 0x04	; 4
    1d84:	fc 01       	movw	r30, r24
    1d86:	e2 0f       	add	r30, r18
    1d88:	f3 1f       	adc	r31, r19
    1d8a:	40 83       	st	Z, r20
	arr_index++;
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	8a 83       	std	Y+2, r24	; 0x02
	num=num/10;
    1d92:	88 8d       	ldd	r24, Y+24	; 0x18
    1d94:	99 8d       	ldd	r25, Y+25	; 0x19
    1d96:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d98:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d9a:	2a e0       	ldi	r18, 0x0A	; 10
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    1daa:	da 01       	movw	r26, r20
    1dac:	c9 01       	movw	r24, r18
    1dae:	88 8f       	std	Y+24, r24	; 0x18
    1db0:	99 8f       	std	Y+25, r25	; 0x19
    1db2:	aa 8f       	std	Y+26, r26	; 0x1a
    1db4:	bb 8f       	std	Y+27, r27	; 0x1b
	length++;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	8f 5f       	subi	r24, 0xFF	; 255
    1dba:	89 83       	std	Y+1, r24	; 0x01
	if(num==0){
		str[arr_index]='0';
		arr_index++;
	}
	else{
		while(num!=0){
    1dbc:	88 8d       	ldd	r24, Y+24	; 0x18
    1dbe:	99 8d       	ldd	r25, Y+25	; 0x19
    1dc0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1dc2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	a1 05       	cpc	r26, r1
    1dc8:	b1 05       	cpc	r27, r1
    1dca:	29 f6       	brne	.-118    	; 0x1d56 <LCD_write_no+0x4e>
	str[arr_index]=rem+'0';
	arr_index++;
	num=num/10;
	length++;
	}
		str[arr_index]='\0';
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	04 96       	adiw	r24, 0x04	; 4
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	e2 0f       	add	r30, r18
    1dda:	f3 1f       	adc	r31, r19
    1ddc:	10 82       	st	Z, r1
		reverse(str,length);
    1dde:	ce 01       	movw	r24, r28
    1de0:	04 96       	adiw	r24, 0x04	; 4
    1de2:	69 81       	ldd	r22, Y+1	; 0x01
    1de4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <reverse>
	}

}
    1de8:	6b 96       	adiw	r28, 0x1b	; 27
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <reverse>:

void reverse(U8 *ptr,U8 length)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <reverse+0x6>
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <reverse+0x8>
    1e02:	0f 92       	push	r0
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	6d 83       	std	Y+5, r22	; 0x05
  U8 start = 0;
    1e0e:	1a 82       	std	Y+2, r1	; 0x02
  U8 end = length-1;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	81 50       	subi	r24, 0x01	; 1
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	19 c0       	rjmp	.+50     	; 0x1e4a <reverse+0x50>
  while(start<end)
  {

	  swap(&ptr[start],&ptr[end]);
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	ac 01       	movw	r20, r24
    1e24:	42 0f       	add	r20, r18
    1e26:	53 1f       	adc	r21, r19
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	28 0f       	add	r18, r24
    1e34:	39 1f       	adc	r19, r25
    1e36:	ca 01       	movw	r24, r20
    1e38:	b9 01       	movw	r22, r18
    1e3a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <swap>
	  start++;
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	8f 5f       	subi	r24, 0xFF	; 255
    1e42:	8a 83       	std	Y+2, r24	; 0x02
	  end--;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	81 50       	subi	r24, 0x01	; 1
    1e48:	89 83       	std	Y+1, r24	; 0x01

void reverse(U8 *ptr,U8 length)
{
  U8 start = 0;
  U8 end = length-1;
  while(start<end)
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	98 17       	cp	r25, r24
    1e50:	18 f3       	brcs	.-58     	; 0x1e18 <reverse+0x1e>

	  swap(&ptr[start],&ptr[end]);
	  start++;
	  end--;
  }
  num1 = ptr;
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	90 93 71 00 	sts	0x0071, r25
    1e5a:	80 93 70 00 	sts	0x0070, r24
  LCD_write_string(ptr);
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <LCD_write_string>
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <swap>:
 void swap(U8 * start, U8 * end)
 {
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <swap+0x6>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <swap+0x8>
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <swap+0xa>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
    1e88:	7e 83       	std	Y+6, r23	; 0x06
    1e8a:	6d 83       	std	Y+5, r22	; 0x05
	 int z=0;
    1e8c:	1a 82       	std	Y+2, r1	; 0x02
    1e8e:	19 82       	std	Y+1, r1	; 0x01
	 z=*start;
    1e90:	eb 81       	ldd	r30, Y+3	; 0x03
    1e92:	fc 81       	ldd	r31, Y+4	; 0x04
    1e94:	80 81       	ld	r24, Z
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
	 *start=*end;
    1e9e:	ed 81       	ldd	r30, Y+5	; 0x05
    1ea0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ea2:	80 81       	ld	r24, Z
    1ea4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea8:	80 83       	st	Z, r24
     *end=z;
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	ed 81       	ldd	r30, Y+5	; 0x05
    1eae:	fe 81       	ldd	r31, Y+6	; 0x06
    1eb0:	80 83       	st	Z, r24
 }
    1eb2:	26 96       	adiw	r28, 0x06	; 6
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <LCD_write_symbol>:

 void LCD_write_symbol(U32 symbol)
 {
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <LCD_write_symbol+0x6>
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <LCD_write_symbol+0x8>
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	69 83       	std	Y+1, r22	; 0x01
    1ed2:	7a 83       	std	Y+2, r23	; 0x02
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
    1ed6:	9c 83       	std	Y+4, r25	; 0x04
	 LCD_write_data(symbol);
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	0e 94 4e 0a 	call	0x149c	; 0x149c <LCD_write_data>
 }
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <NumberOrSymbol>:

void NumberOrSymbol(U32 select)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <NumberOrSymbol+0x6>
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <NumberOrSymbol+0x8>
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	69 83       	std	Y+1, r22	; 0x01
    1efa:	7a 83       	std	Y+2, r23	; 0x02
    1efc:	8b 83       	std	Y+3, r24	; 0x03
    1efe:	9c 83       	std	Y+4, r25	; 0x04
	if( (select =='+') || (select =='-') || (select =='*') || (select =='/') || (select =='='))
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	ab 81       	ldd	r26, Y+3	; 0x03
    1f06:	bc 81       	ldd	r27, Y+4	; 0x04
    1f08:	8b 32       	cpi	r24, 0x2B	; 43
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	a1 05       	cpc	r26, r1
    1f0e:	b1 05       	cpc	r27, r1
    1f10:	21 f1       	breq	.+72     	; 0x1f5a <NumberOrSymbol+0x6e>
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	ab 81       	ldd	r26, Y+3	; 0x03
    1f18:	bc 81       	ldd	r27, Y+4	; 0x04
    1f1a:	8d 32       	cpi	r24, 0x2D	; 45
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	a1 05       	cpc	r26, r1
    1f20:	b1 05       	cpc	r27, r1
    1f22:	d9 f0       	breq	.+54     	; 0x1f5a <NumberOrSymbol+0x6e>
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	ab 81       	ldd	r26, Y+3	; 0x03
    1f2a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f2c:	8a 32       	cpi	r24, 0x2A	; 42
    1f2e:	91 05       	cpc	r25, r1
    1f30:	a1 05       	cpc	r26, r1
    1f32:	b1 05       	cpc	r27, r1
    1f34:	91 f0       	breq	.+36     	; 0x1f5a <NumberOrSymbol+0x6e>
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f3c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f3e:	8f 32       	cpi	r24, 0x2F	; 47
    1f40:	91 05       	cpc	r25, r1
    1f42:	a1 05       	cpc	r26, r1
    1f44:	b1 05       	cpc	r27, r1
    1f46:	49 f0       	breq	.+18     	; 0x1f5a <NumberOrSymbol+0x6e>
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f4e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f50:	8d 33       	cpi	r24, 0x3D	; 61
    1f52:	91 05       	cpc	r25, r1
    1f54:	a1 05       	cpc	r26, r1
    1f56:	b1 05       	cpc	r27, r1
    1f58:	49 f4       	brne	.+18     	; 0x1f6c <NumberOrSymbol+0x80>
	{
	   LCD_write_symbol(select);
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	ab 81       	ldd	r26, Y+3	; 0x03
    1f60:	bc 81       	ldd	r27, Y+4	; 0x04
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_write_symbol>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <NumberOrSymbol+0xa8>
	}
	else if((select =='c'))
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	ab 81       	ldd	r26, Y+3	; 0x03
    1f72:	bc 81       	ldd	r27, Y+4	; 0x04
    1f74:	83 36       	cpi	r24, 0x63	; 99
    1f76:	91 05       	cpc	r25, r1
    1f78:	a1 05       	cpc	r26, r1
    1f7a:	b1 05       	cpc	r27, r1
    1f7c:	19 f4       	brne	.+6      	; 0x1f84 <NumberOrSymbol+0x98>
	{
		LCD_clear();
    1f7e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <LCD_clear>
    1f82:	08 c0       	rjmp	.+16     	; 0x1f94 <NumberOrSymbol+0xa8>
	}

		else
		{
			LCD_write_no(select);
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	ab 81       	ldd	r26, Y+3	; 0x03
    1f8a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <LCD_write_no>
		}
	}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <main>:
#include"DIO_interface.h"
#include"LCD_interface.h"
#include"I2C_interface.h"

void main(void)
{
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	a2 97       	sbiw	r28, 0x22	; 34
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61

	DIO_set_pin_direction(Group_C,DIO_pin_C0,DIO_Output);
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_set_pin_direction>
	DIO_set_pin_direction(Group_C,DIO_pin_C1,DIO_Output);
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_set_pin_direction>
	LCD_initial();
    1fce:	0e 94 13 0b 	call	0x1626	; 0x1626 <LCD_initial>
	U8 arr[]="KHALED";
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	40 96       	adiw	r24, 0x10	; 16
    1fd6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fd8:	8e 8f       	std	Y+30, r24	; 0x1e
    1fda:	e0 e6       	ldi	r30, 0x60	; 96
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	f9 a3       	std	Y+33, r31	; 0x21
    1fe0:	e8 a3       	std	Y+32, r30	; 0x20
    1fe2:	f7 e0       	ldi	r31, 0x07	; 7
    1fe4:	fa a3       	std	Y+34, r31	; 0x22
    1fe6:	e8 a1       	ldd	r30, Y+32	; 0x20
    1fe8:	f9 a1       	ldd	r31, Y+33	; 0x21
    1fea:	00 80       	ld	r0, Z
    1fec:	88 a1       	ldd	r24, Y+32	; 0x20
    1fee:	99 a1       	ldd	r25, Y+33	; 0x21
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	99 a3       	std	Y+33, r25	; 0x21
    1ff4:	88 a3       	std	Y+32, r24	; 0x20
    1ff6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ff8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1ffa:	00 82       	st	Z, r0
    1ffc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ffe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	9f 8f       	std	Y+31, r25	; 0x1f
    2004:	8e 8f       	std	Y+30, r24	; 0x1e
    2006:	9a a1       	ldd	r25, Y+34	; 0x22
    2008:	91 50       	subi	r25, 0x01	; 1
    200a:	9a a3       	std	Y+34, r25	; 0x22
    200c:	ea a1       	ldd	r30, Y+34	; 0x22
    200e:	ee 23       	and	r30, r30
    2010:	51 f7       	brne	.-44     	; 0x1fe6 <main+0x44>
	U8 LCD[7];
    U8 i =0;
    2012:	1f 86       	std	Y+15, r1	; 0x0f
	I2C_MASTER_INIT();
    2014:	0e 94 70 09 	call	0x12e0	; 0x12e0 <I2C_MASTER_INIT>
	I2C_START();
    2018:	0e 94 7e 09 	call	0x12fc	; 0x12fc <I2C_START>
	I2C_MASTER_TRANSMIT(0b10100000);
    201c:	80 ea       	ldi	r24, 0xA0	; 160
    201e:	0e 94 8e 09 	call	0x131c	; 0x131c <I2C_MASTER_TRANSMIT>
	I2C_MASTER_TRANSMIT(0b00000000);
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	0e 94 8e 09 	call	0x131c	; 0x131c <I2C_MASTER_TRANSMIT>
	for(i=0;i<6;i++)
    2028:	1f 86       	std	Y+15, r1	; 0x0f
    202a:	0e c0       	rjmp	.+28     	; 0x2048 <main+0xa6>
	{
		I2C_MASTER_TRANSMIT(arr[i]);
    202c:	8f 85       	ldd	r24, Y+15	; 0x0f
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	ce 01       	movw	r24, r28
    2034:	40 96       	adiw	r24, 0x10	; 16
    2036:	fc 01       	movw	r30, r24
    2038:	e2 0f       	add	r30, r18
    203a:	f3 1f       	adc	r31, r19
    203c:	80 81       	ld	r24, Z
    203e:	0e 94 8e 09 	call	0x131c	; 0x131c <I2C_MASTER_TRANSMIT>
    U8 i =0;
	I2C_MASTER_INIT();
	I2C_START();
	I2C_MASTER_TRANSMIT(0b10100000);
	I2C_MASTER_TRANSMIT(0b00000000);
	for(i=0;i<6;i++)
    2042:	8f 85       	ldd	r24, Y+15	; 0x0f
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	8f 87       	std	Y+15, r24	; 0x0f
    2048:	8f 85       	ldd	r24, Y+15	; 0x0f
    204a:	86 30       	cpi	r24, 0x06	; 6
    204c:	78 f3       	brcs	.-34     	; 0x202c <main+0x8a>
	{
		I2C_MASTER_TRANSMIT(arr[i]);
	}
	 I2C_STOP();
    204e:	0e 94 a5 09 	call	0x134a	; 0x134a <I2C_STOP>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e2       	ldi	r26, 0x20	; 32
    2058:	b1 e4       	ldi	r27, 0x41	; 65
    205a:	8b 87       	std	Y+11, r24	; 0x0b
    205c:	9c 87       	std	Y+12, r25	; 0x0c
    205e:	ad 87       	std	Y+13, r26	; 0x0d
    2060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	6b 85       	ldd	r22, Y+11	; 0x0b
    2064:	7c 85       	ldd	r23, Y+12	; 0x0c
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a ef       	ldi	r20, 0xFA	; 250
    2070:	54 e4       	ldi	r21, 0x44	; 68
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8f 83       	std	Y+7, r24	; 0x07
    207c:	98 87       	std	Y+8, r25	; 0x08
    207e:	a9 87       	std	Y+9, r26	; 0x09
    2080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <main+0x102>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <main+0x180>
	else if (__tmp > 65535)
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <main+0x162>
    20e6:	88 ec       	ldi	r24, 0xC8	; 200
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <main+0x150>
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <main+0x144>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <main+0x18c>
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(10);

	 I2C_START();
    2136:	0e 94 7e 09 	call	0x12fc	; 0x12fc <I2C_START>
	 I2C_MASTER_TRANSMIT(0b10100000);
    213a:	80 ea       	ldi	r24, 0xA0	; 160
    213c:	0e 94 8e 09 	call	0x131c	; 0x131c <I2C_MASTER_TRANSMIT>
	 I2C_MASTER_TRANSMIT(0b00000000);
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	0e 94 8e 09 	call	0x131c	; 0x131c <I2C_MASTER_TRANSMIT>
	 I2C_START();
    2146:	0e 94 7e 09 	call	0x12fc	; 0x12fc <I2C_START>
	 I2C_MASTER_TRANSMIT(0b10100001);
    214a:	81 ea       	ldi	r24, 0xA1	; 161
    214c:	0e 94 8e 09 	call	0x131c	; 0x131c <I2C_MASTER_TRANSMIT>
	 for(i=0;i<6;i++)
    2150:	1f 86       	std	Y+15, r1	; 0x0f
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <main+0x1d0>
	 {
		 LCD[i] = I2C_MASTER_RECIEVE_ACK();
    2154:	8f 85       	ldd	r24, Y+15	; 0x0f
    2156:	08 2f       	mov	r16, r24
    2158:	10 e0       	ldi	r17, 0x00	; 0
    215a:	0e 94 bb 09 	call	0x1376	; 0x1376 <I2C_MASTER_RECIEVE_ACK>
    215e:	28 2f       	mov	r18, r24
    2160:	ce 01       	movw	r24, r28
    2162:	47 96       	adiw	r24, 0x17	; 23
    2164:	fc 01       	movw	r30, r24
    2166:	e0 0f       	add	r30, r16
    2168:	f1 1f       	adc	r31, r17
    216a:	20 83       	st	Z, r18
	 I2C_START();
	 I2C_MASTER_TRANSMIT(0b10100000);
	 I2C_MASTER_TRANSMIT(0b00000000);
	 I2C_START();
	 I2C_MASTER_TRANSMIT(0b10100001);
	 for(i=0;i<6;i++)
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	8f 5f       	subi	r24, 0xFF	; 255
    2170:	8f 87       	std	Y+15, r24	; 0x0f
    2172:	8f 85       	ldd	r24, Y+15	; 0x0f
    2174:	86 30       	cpi	r24, 0x06	; 6
    2176:	70 f3       	brcs	.-36     	; 0x2154 <main+0x1b2>
	 {
		 LCD[i] = I2C_MASTER_RECIEVE_ACK();
	 }
	 I2C_MASTER_RECIEVE_NACK();
    2178:	0e 94 ce 09 	call	0x139c	; 0x139c <I2C_MASTER_RECIEVE_NACK>
	 I2C_STOP();
    217c:	0e 94 a5 09 	call	0x134a	; 0x134a <I2C_STOP>
	 LCD[i]='\0';
    2180:	8f 85       	ldd	r24, Y+15	; 0x0f
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	ce 01       	movw	r24, r28
    2188:	47 96       	adiw	r24, 0x17	; 23
    218a:	fc 01       	movw	r30, r24
    218c:	e2 0f       	add	r30, r18
    218e:	f3 1f       	adc	r31, r19
    2190:	10 82       	st	Z, r1
	 LCD_write_string(LCD);
    2192:	ce 01       	movw	r24, r28
    2194:	47 96       	adiw	r24, 0x17	; 23
    2196:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <LCD_write_string>
    219a:	ff cf       	rjmp	.-2      	; 0x219a <main+0x1f8>

0000219c <__udivmodsi4>:
    219c:	a1 e2       	ldi	r26, 0x21	; 33
    219e:	1a 2e       	mov	r1, r26
    21a0:	aa 1b       	sub	r26, r26
    21a2:	bb 1b       	sub	r27, r27
    21a4:	fd 01       	movw	r30, r26
    21a6:	0d c0       	rjmp	.+26     	; 0x21c2 <__udivmodsi4_ep>

000021a8 <__udivmodsi4_loop>:
    21a8:	aa 1f       	adc	r26, r26
    21aa:	bb 1f       	adc	r27, r27
    21ac:	ee 1f       	adc	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	a2 17       	cp	r26, r18
    21b2:	b3 07       	cpc	r27, r19
    21b4:	e4 07       	cpc	r30, r20
    21b6:	f5 07       	cpc	r31, r21
    21b8:	20 f0       	brcs	.+8      	; 0x21c2 <__udivmodsi4_ep>
    21ba:	a2 1b       	sub	r26, r18
    21bc:	b3 0b       	sbc	r27, r19
    21be:	e4 0b       	sbc	r30, r20
    21c0:	f5 0b       	sbc	r31, r21

000021c2 <__udivmodsi4_ep>:
    21c2:	66 1f       	adc	r22, r22
    21c4:	77 1f       	adc	r23, r23
    21c6:	88 1f       	adc	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	1a 94       	dec	r1
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <__udivmodsi4_loop>
    21ce:	60 95       	com	r22
    21d0:	70 95       	com	r23
    21d2:	80 95       	com	r24
    21d4:	90 95       	com	r25
    21d6:	9b 01       	movw	r18, r22
    21d8:	ac 01       	movw	r20, r24
    21da:	bd 01       	movw	r22, r26
    21dc:	cf 01       	movw	r24, r30
    21de:	08 95       	ret

000021e0 <__prologue_saves__>:
    21e0:	2f 92       	push	r2
    21e2:	3f 92       	push	r3
    21e4:	4f 92       	push	r4
    21e6:	5f 92       	push	r5
    21e8:	6f 92       	push	r6
    21ea:	7f 92       	push	r7
    21ec:	8f 92       	push	r8
    21ee:	9f 92       	push	r9
    21f0:	af 92       	push	r10
    21f2:	bf 92       	push	r11
    21f4:	cf 92       	push	r12
    21f6:	df 92       	push	r13
    21f8:	ef 92       	push	r14
    21fa:	ff 92       	push	r15
    21fc:	0f 93       	push	r16
    21fe:	1f 93       	push	r17
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	ca 1b       	sub	r28, r26
    220a:	db 0b       	sbc	r29, r27
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	09 94       	ijmp

00002218 <__epilogue_restores__>:
    2218:	2a 88       	ldd	r2, Y+18	; 0x12
    221a:	39 88       	ldd	r3, Y+17	; 0x11
    221c:	48 88       	ldd	r4, Y+16	; 0x10
    221e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2220:	6e 84       	ldd	r6, Y+14	; 0x0e
    2222:	7d 84       	ldd	r7, Y+13	; 0x0d
    2224:	8c 84       	ldd	r8, Y+12	; 0x0c
    2226:	9b 84       	ldd	r9, Y+11	; 0x0b
    2228:	aa 84       	ldd	r10, Y+10	; 0x0a
    222a:	b9 84       	ldd	r11, Y+9	; 0x09
    222c:	c8 84       	ldd	r12, Y+8	; 0x08
    222e:	df 80       	ldd	r13, Y+7	; 0x07
    2230:	ee 80       	ldd	r14, Y+6	; 0x06
    2232:	fd 80       	ldd	r15, Y+5	; 0x05
    2234:	0c 81       	ldd	r16, Y+4	; 0x04
    2236:	1b 81       	ldd	r17, Y+3	; 0x03
    2238:	aa 81       	ldd	r26, Y+2	; 0x02
    223a:	b9 81       	ldd	r27, Y+1	; 0x01
    223c:	ce 0f       	add	r28, r30
    223e:	d1 1d       	adc	r29, r1
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	ed 01       	movw	r28, r26
    224c:	08 95       	ret

0000224e <_exit>:
    224e:	f8 94       	cli

00002250 <__stop_program>:
    2250:	ff cf       	rjmp	.-2      	; 0x2250 <__stop_program>
