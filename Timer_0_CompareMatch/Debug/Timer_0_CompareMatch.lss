
Timer_0_CompareMatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000902  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000976  2**0
                  ALLOC
  2 .stab         00000a38  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000487  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 53 04 	call	0x8a6	; 0x8a6 <main>
  74:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:
#include"ADC_private.h"
#include"ADC_config.h"


void ADC_init(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	//Set prescaler to divide 128

	//ADCSRA &=init_pc;
	set_bit(ADCSRA,ADCSRA_ADPS2);
  84:	a6 e2       	ldi	r26, 0x26	; 38
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e6 e2       	ldi	r30, 0x26	; 38
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	8c 93       	st	X, r24
	set_bit(ADCSRA,ADCSRA_ADPS1);
  92:	a6 e2       	ldi	r26, 0x26	; 38
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e6 e2       	ldi	r30, 0x26	; 38
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	8c 93       	st	X, r24
	set_bit(ADCSRA,ADCSRA_ADPS0);
  a0:	a6 e2       	ldi	r26, 0x26	; 38
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e6 e2       	ldi	r30, 0x26	; 38
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	8c 93       	st	X, r24
	//ADCSRA |=ADC_PREC

	//AVCC as reference voltage
	set_bit(ADMUX,ADMUX_REFS0);
  ae:	a7 e2       	ldi	r26, 0x27	; 39
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e7 e2       	ldi	r30, 0x27	; 39
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8c 93       	st	X, r24
	clear_bit(ADMUX,ADMUX_REFS1);
  bc:	a7 e2       	ldi	r26, 0x27	; 39
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e7 e2       	ldi	r30, 0x27	; 39
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	8c 93       	st	X, r24


	//activate left adjust result
	set_bit(ADMUX,ADMUX_ADLAR);
  ca:	a7 e2       	ldi	r26, 0x27	; 39
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e7 e2       	ldi	r30, 0x27	; 39
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	8c 93       	st	X, r24

	//Enable peripheral
	set_bit(ADCSRA,ADCSRA_ADEN);
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	8c 93       	st	X, r24
}
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <ADC_ChannelReading>:
U8 ADC_ChannelReading(U8 channel)
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	0f 92       	push	r0
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	89 83       	std	Y+1, r24	; 0x01
     //clear the mux bit in ADMUX register
	ADMUX &= 0b11100000;
  f8:	a7 e2       	ldi	r26, 0x27	; 39
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e7 e2       	ldi	r30, 0x27	; 39
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 7e       	andi	r24, 0xE0	; 224
 104:	8c 93       	st	X, r24
	ADMUX |= channel;
 106:	a7 e2       	ldi	r26, 0x27	; 39
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e7 e2       	ldi	r30, 0x27	; 39
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	89 2b       	or	r24, r25
 114:	8c 93       	st	X, r24

	//start conversion
	set_bit(ADCSRA,ADCSRA_ADSC);
 116:	a6 e2       	ldi	r26, 0x26	; 38
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	e6 e2       	ldi	r30, 0x26	; 38
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	8c 93       	st	X, r24

	//polling (busy waiting) until the conversion complete the flag
    while(get_bit(ADCSRA,ADCSRA_ADIF)==0);
 124:	e6 e2       	ldi	r30, 0x26	; 38
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 95       	swap	r24
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	81 70       	andi	r24, 0x01	; 1
 134:	90 70       	andi	r25, 0x00	; 0
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	a9 f3       	breq	.-22     	; 0x124 <ADC_ChannelReading+0x38>

    //clear the conversion complete flag
    set_bit(ADCSRA,ADCSRA_ADIF);
 13a:	a6 e2       	ldi	r26, 0x26	; 38
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e6 e2       	ldi	r30, 0x26	; 38
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 61       	ori	r24, 0x10	; 16
 146:	8c 93       	st	X, r24

    return ADCH;
 148:	e5 e2       	ldi	r30, 0x25	; 37
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
}
 14e:	0f 90       	pop	r0
 150:	cf 91       	pop	r28
 152:	df 91       	pop	r29
 154:	08 95       	ret

00000156 <ADC_Read_10>:


U16 ADC_Read_10(U8 channel){
 156:	df 93       	push	r29
 158:	cf 93       	push	r28
 15a:	00 d0       	rcall	.+0      	; 0x15c <ADC_Read_10+0x6>
 15c:	0f 92       	push	r0
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	8b 83       	std	Y+3, r24	; 0x03
	ADMUX &= 0b11100000; // channel selection
 164:	a7 e2       	ldi	r26, 0x27	; 39
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e7 e2       	ldi	r30, 0x27	; 39
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 7e       	andi	r24, 0xE0	; 224
 170:	8c 93       	st	X, r24
	ADMUX |= channel;
 172:	a7 e2       	ldi	r26, 0x27	; 39
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	e7 e2       	ldi	r30, 0x27	; 39
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	89 2b       	or	r24, r25
 180:	8c 93       	st	X, r24

	set_bit(ADCSRA,6); // start conversion(default single conversion)
 182:	a6 e2       	ldi	r26, 0x26	; 38
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e6 e2       	ldi	r30, 0x26	; 38
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	8c 93       	st	X, r24

	while(get_bit(ADCSRA,4)==0);
 190:	e6 e2       	ldi	r30, 0x26	; 38
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	82 95       	swap	r24
 198:	8f 70       	andi	r24, 0x0F	; 15
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	81 70       	andi	r24, 0x01	; 1
 1a0:	90 70       	andi	r25, 0x00	; 0
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	a9 f3       	breq	.-22     	; 0x190 <ADC_Read_10+0x3a>
	set_bit(ADCSRA,4);  //clear flag
 1a6:	a6 e2       	ldi	r26, 0x26	; 38
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	e6 e2       	ldi	r30, 0x26	; 38
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	8c 93       	st	X, r24
	U16 res = (ADCL>>6);
 1b4:	e4 e2       	ldi	r30, 0x24	; 36
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	82 95       	swap	r24
 1bc:	86 95       	lsr	r24
 1be:	86 95       	lsr	r24
 1c0:	83 70       	andi	r24, 0x03	; 3
 1c2:	88 2f       	mov	r24, r24
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	9a 83       	std	Y+2, r25	; 0x02
 1c8:	89 83       	std	Y+1, r24	; 0x01
	res |= (((U16)ADCH)<<2) ;
 1ca:	e5 e2       	ldi	r30, 0x25	; 37
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	9c 01       	movw	r18, r24
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	9a 81       	ldd	r25, Y+2	; 0x02
 1e2:	82 2b       	or	r24, r18
 1e4:	93 2b       	or	r25, r19
 1e6:	9a 83       	std	Y+2, r25	; 0x02
 1e8:	89 83       	std	Y+1, r24	; 0x01
	return res;
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	08 95       	ret

000001fa <DIO_set_pin_direction>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

U8 DIO_set_pin_direction(U8 port_NB,U8 pin_NB,U8 pin_direction)
{
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	00 d0       	rcall	.+0      	; 0x200 <DIO_set_pin_direction+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <DIO_set_pin_direction+0x8>
 202:	00 d0       	rcall	.+0      	; 0x204 <DIO_set_pin_direction+0xa>
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	8a 83       	std	Y+2, r24	; 0x02
 20a:	6b 83       	std	Y+3, r22	; 0x03
 20c:	4c 83       	std	Y+4, r20	; 0x04
U8 error_state = 0;
 20e:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	84 30       	cpi	r24, 0x04	; 4
 214:	18 f0       	brcs	.+6      	; 0x21c <DIO_set_pin_direction+0x22>
{
	error_state = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	e0 c0       	rjmp	.+448    	; 0x3dc <DIO_set_pin_direction+0x1e2>
}
else if(pin_NB>=DIO_Max_pin_NB )
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	18 f0       	brcs	.+6      	; 0x228 <DIO_set_pin_direction+0x2e>
{
	error_state = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	89 83       	std	Y+1, r24	; 0x01
 226:	da c0       	rjmp	.+436    	; 0x3dc <DIO_set_pin_direction+0x1e2>
}
else if((pin_direction !=DIO_Input) && (pin_direction!=DIO_Output))
 228:	8c 81       	ldd	r24, Y+4	; 0x04
 22a:	88 23       	and	r24, r24
 22c:	31 f0       	breq	.+12     	; 0x23a <DIO_set_pin_direction+0x40>
 22e:	8c 81       	ldd	r24, Y+4	; 0x04
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	19 f0       	breq	.+6      	; 0x23a <DIO_set_pin_direction+0x40>
{
	error_state = 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	89 83       	std	Y+1, r24	; 0x01
 238:	d1 c0       	rjmp	.+418    	; 0x3dc <DIO_set_pin_direction+0x1e2>
}
else{
     switch(port_NB){
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	3e 83       	std	Y+6, r19	; 0x06
 242:	2d 83       	std	Y+5, r18	; 0x05
 244:	8d 81       	ldd	r24, Y+5	; 0x05
 246:	9e 81       	ldd	r25, Y+6	; 0x06
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	91 05       	cpc	r25, r1
 24c:	09 f4       	brne	.+2      	; 0x250 <DIO_set_pin_direction+0x56>
 24e:	43 c0       	rjmp	.+134    	; 0x2d6 <DIO_set_pin_direction+0xdc>
 250:	2d 81       	ldd	r18, Y+5	; 0x05
 252:	3e 81       	ldd	r19, Y+6	; 0x06
 254:	22 30       	cpi	r18, 0x02	; 2
 256:	31 05       	cpc	r19, r1
 258:	2c f4       	brge	.+10     	; 0x264 <DIO_set_pin_direction+0x6a>
 25a:	8d 81       	ldd	r24, Y+5	; 0x05
 25c:	9e 81       	ldd	r25, Y+6	; 0x06
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	71 f0       	breq	.+28     	; 0x27e <DIO_set_pin_direction+0x84>
 262:	bc c0       	rjmp	.+376    	; 0x3dc <DIO_set_pin_direction+0x1e2>
 264:	2d 81       	ldd	r18, Y+5	; 0x05
 266:	3e 81       	ldd	r19, Y+6	; 0x06
 268:	22 30       	cpi	r18, 0x02	; 2
 26a:	31 05       	cpc	r19, r1
 26c:	09 f4       	brne	.+2      	; 0x270 <DIO_set_pin_direction+0x76>
 26e:	5f c0       	rjmp	.+190    	; 0x32e <DIO_set_pin_direction+0x134>
 270:	8d 81       	ldd	r24, Y+5	; 0x05
 272:	9e 81       	ldd	r25, Y+6	; 0x06
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	91 05       	cpc	r25, r1
 278:	09 f4       	brne	.+2      	; 0x27c <DIO_set_pin_direction+0x82>
 27a:	85 c0       	rjmp	.+266    	; 0x386 <DIO_set_pin_direction+0x18c>
 27c:	af c0       	rjmp	.+350    	; 0x3dc <DIO_set_pin_direction+0x1e2>
      case Group_A:
	   assign_bit(DIO_U8_DDRA,pin_NB,pin_direction);
 27e:	8c 81       	ldd	r24, Y+4	; 0x04
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	a1 f4       	brne	.+40     	; 0x2ac <DIO_set_pin_direction+0xb2>
 284:	aa e3       	ldi	r26, 0x3A	; 58
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	ea e3       	ldi	r30, 0x3A	; 58
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	48 2f       	mov	r20, r24
 290:	8b 81       	ldd	r24, Y+3	; 0x03
 292:	28 2f       	mov	r18, r24
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 2e       	mov	r0, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_set_pin_direction+0xa8>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_set_pin_direction+0xa4>
 2a6:	84 2b       	or	r24, r20
 2a8:	8c 93       	st	X, r24
 2aa:	98 c0       	rjmp	.+304    	; 0x3dc <DIO_set_pin_direction+0x1e2>
 2ac:	aa e3       	ldi	r26, 0x3A	; 58
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	ea e3       	ldi	r30, 0x3A	; 58
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	48 2f       	mov	r20, r24
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 2e       	mov	r0, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_set_pin_direction+0xd0>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_set_pin_direction+0xcc>
 2ce:	80 95       	com	r24
 2d0:	84 23       	and	r24, r20
 2d2:	8c 93       	st	X, r24
 2d4:	83 c0       	rjmp	.+262    	; 0x3dc <DIO_set_pin_direction+0x1e2>
	   break;
	   case Group_B:
	   assign_bit(DIO_U8_DDRB,pin_NB,pin_direction);
 2d6:	8c 81       	ldd	r24, Y+4	; 0x04
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	a1 f4       	brne	.+40     	; 0x304 <DIO_set_pin_direction+0x10a>
 2dc:	a7 e3       	ldi	r26, 0x37	; 55
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	e7 e3       	ldi	r30, 0x37	; 55
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	48 2f       	mov	r20, r24
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 2e       	mov	r0, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_set_pin_direction+0x100>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_set_pin_direction+0xfc>
 2fe:	84 2b       	or	r24, r20
 300:	8c 93       	st	X, r24
 302:	6c c0       	rjmp	.+216    	; 0x3dc <DIO_set_pin_direction+0x1e2>
 304:	a7 e3       	ldi	r26, 0x37	; 55
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	e7 e3       	ldi	r30, 0x37	; 55
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	48 2f       	mov	r20, r24
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_set_pin_direction+0x128>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_set_pin_direction+0x124>
 326:	80 95       	com	r24
 328:	84 23       	and	r24, r20
 32a:	8c 93       	st	X, r24
 32c:	57 c0       	rjmp	.+174    	; 0x3dc <DIO_set_pin_direction+0x1e2>
	   break;
     case Group_C:
	   assign_bit(DIO_U8_DDRC,pin_NB,pin_direction);
 32e:	8c 81       	ldd	r24, Y+4	; 0x04
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	a1 f4       	brne	.+40     	; 0x35c <DIO_set_pin_direction+0x162>
 334:	a4 e3       	ldi	r26, 0x34	; 52
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e4 e3       	ldi	r30, 0x34	; 52
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	48 2f       	mov	r20, r24
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 2e       	mov	r0, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_set_pin_direction+0x158>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_set_pin_direction+0x154>
 356:	84 2b       	or	r24, r20
 358:	8c 93       	st	X, r24
 35a:	40 c0       	rjmp	.+128    	; 0x3dc <DIO_set_pin_direction+0x1e2>
 35c:	a4 e3       	ldi	r26, 0x34	; 52
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e4 e3       	ldi	r30, 0x34	; 52
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_set_pin_direction+0x180>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_set_pin_direction+0x17c>
 37e:	80 95       	com	r24
 380:	84 23       	and	r24, r20
 382:	8c 93       	st	X, r24
 384:	2b c0       	rjmp	.+86     	; 0x3dc <DIO_set_pin_direction+0x1e2>
	   break;
     case Group_D:
	   assign_bit(DIO_U8_DDRD,pin_NB,pin_direction);
 386:	8c 81       	ldd	r24, Y+4	; 0x04
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	a1 f4       	brne	.+40     	; 0x3b4 <DIO_set_pin_direction+0x1ba>
 38c:	a1 e3       	ldi	r26, 0x31	; 49
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	e1 e3       	ldi	r30, 0x31	; 49
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 2e       	mov	r0, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_set_pin_direction+0x1b0>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_set_pin_direction+0x1ac>
 3ae:	84 2b       	or	r24, r20
 3b0:	8c 93       	st	X, r24
 3b2:	14 c0       	rjmp	.+40     	; 0x3dc <DIO_set_pin_direction+0x1e2>
 3b4:	a1 e3       	ldi	r26, 0x31	; 49
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	e1 e3       	ldi	r30, 0x31	; 49
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	48 2f       	mov	r20, r24
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 2e       	mov	r0, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_set_pin_direction+0x1d8>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_set_pin_direction+0x1d4>
 3d6:	80 95       	com	r24
 3d8:	84 23       	and	r24, r20
 3da:	8c 93       	st	X, r24
	   break;
}
}

return error_state;
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
}
 3de:	26 96       	adiw	r28, 0x06	; 6
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
 3ea:	cf 91       	pop	r28
 3ec:	df 91       	pop	r29
 3ee:	08 95       	ret

000003f0 <DIO_set_pin_value>:


U8 DIO_set_pin_value(U8 port_NB,U8 pin_NB,U8 pin_value)
{
 3f0:	df 93       	push	r29
 3f2:	cf 93       	push	r28
 3f4:	00 d0       	rcall	.+0      	; 0x3f6 <DIO_set_pin_value+0x6>
 3f6:	00 d0       	rcall	.+0      	; 0x3f8 <DIO_set_pin_value+0x8>
 3f8:	00 d0       	rcall	.+0      	; 0x3fa <DIO_set_pin_value+0xa>
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	8a 83       	std	Y+2, r24	; 0x02
 400:	6b 83       	std	Y+3, r22	; 0x03
 402:	4c 83       	std	Y+4, r20	; 0x04
U8 error_state = 0;
 404:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	84 30       	cpi	r24, 0x04	; 4
 40a:	18 f0       	brcs	.+6      	; 0x412 <DIO_set_pin_value+0x22>
{
	error_state = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	e0 c0       	rjmp	.+448    	; 0x5d2 <DIO_set_pin_value+0x1e2>
}
else if(pin_NB>=DIO_Max_pin_NB)
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	88 30       	cpi	r24, 0x08	; 8
 416:	18 f0       	brcs	.+6      	; 0x41e <DIO_set_pin_value+0x2e>
{
	error_state = 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	89 83       	std	Y+1, r24	; 0x01
 41c:	da c0       	rjmp	.+436    	; 0x5d2 <DIO_set_pin_value+0x1e2>
}
else if((pin_value!=DIO_High) && (pin_value!=DIO_Low))
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	31 f0       	breq	.+12     	; 0x430 <DIO_set_pin_value+0x40>
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	88 23       	and	r24, r24
 428:	19 f0       	breq	.+6      	; 0x430 <DIO_set_pin_value+0x40>
{
	error_state = 1;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	89 83       	std	Y+1, r24	; 0x01
 42e:	d1 c0       	rjmp	.+418    	; 0x5d2 <DIO_set_pin_value+0x1e2>
}
else{
     switch(port_NB){
 430:	8a 81       	ldd	r24, Y+2	; 0x02
 432:	28 2f       	mov	r18, r24
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	3e 83       	std	Y+6, r19	; 0x06
 438:	2d 83       	std	Y+5, r18	; 0x05
 43a:	8d 81       	ldd	r24, Y+5	; 0x05
 43c:	9e 81       	ldd	r25, Y+6	; 0x06
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	91 05       	cpc	r25, r1
 442:	09 f4       	brne	.+2      	; 0x446 <DIO_set_pin_value+0x56>
 444:	43 c0       	rjmp	.+134    	; 0x4cc <DIO_set_pin_value+0xdc>
 446:	2d 81       	ldd	r18, Y+5	; 0x05
 448:	3e 81       	ldd	r19, Y+6	; 0x06
 44a:	22 30       	cpi	r18, 0x02	; 2
 44c:	31 05       	cpc	r19, r1
 44e:	2c f4       	brge	.+10     	; 0x45a <DIO_set_pin_value+0x6a>
 450:	8d 81       	ldd	r24, Y+5	; 0x05
 452:	9e 81       	ldd	r25, Y+6	; 0x06
 454:	00 97       	sbiw	r24, 0x00	; 0
 456:	71 f0       	breq	.+28     	; 0x474 <DIO_set_pin_value+0x84>
 458:	bc c0       	rjmp	.+376    	; 0x5d2 <DIO_set_pin_value+0x1e2>
 45a:	2d 81       	ldd	r18, Y+5	; 0x05
 45c:	3e 81       	ldd	r19, Y+6	; 0x06
 45e:	22 30       	cpi	r18, 0x02	; 2
 460:	31 05       	cpc	r19, r1
 462:	09 f4       	brne	.+2      	; 0x466 <DIO_set_pin_value+0x76>
 464:	5f c0       	rjmp	.+190    	; 0x524 <DIO_set_pin_value+0x134>
 466:	8d 81       	ldd	r24, Y+5	; 0x05
 468:	9e 81       	ldd	r25, Y+6	; 0x06
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	91 05       	cpc	r25, r1
 46e:	09 f4       	brne	.+2      	; 0x472 <DIO_set_pin_value+0x82>
 470:	85 c0       	rjmp	.+266    	; 0x57c <DIO_set_pin_value+0x18c>
 472:	af c0       	rjmp	.+350    	; 0x5d2 <DIO_set_pin_value+0x1e2>
      case Group_A:
	   assign_bit(DIO_U8_PORTA,pin_NB,pin_value);
 474:	8c 81       	ldd	r24, Y+4	; 0x04
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	a1 f4       	brne	.+40     	; 0x4a2 <DIO_set_pin_value+0xb2>
 47a:	ab e3       	ldi	r26, 0x3B	; 59
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	eb e3       	ldi	r30, 0x3B	; 59
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	48 2f       	mov	r20, r24
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 2e       	mov	r0, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_set_pin_value+0xa8>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_set_pin_value+0xa4>
 49c:	84 2b       	or	r24, r20
 49e:	8c 93       	st	X, r24
 4a0:	98 c0       	rjmp	.+304    	; 0x5d2 <DIO_set_pin_value+0x1e2>
 4a2:	ab e3       	ldi	r26, 0x3B	; 59
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	eb e3       	ldi	r30, 0x3B	; 59
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	8b 81       	ldd	r24, Y+3	; 0x03
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_set_pin_value+0xd0>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_set_pin_value+0xcc>
 4c4:	80 95       	com	r24
 4c6:	84 23       	and	r24, r20
 4c8:	8c 93       	st	X, r24
 4ca:	83 c0       	rjmp	.+262    	; 0x5d2 <DIO_set_pin_value+0x1e2>
	   break;
	   case Group_B:
	   assign_bit(DIO_U8_PORTB,pin_NB,pin_value);
 4cc:	8c 81       	ldd	r24, Y+4	; 0x04
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	a1 f4       	brne	.+40     	; 0x4fa <DIO_set_pin_value+0x10a>
 4d2:	a8 e3       	ldi	r26, 0x38	; 56
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e8 e3       	ldi	r30, 0x38	; 56
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	8b 81       	ldd	r24, Y+3	; 0x03
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 2e       	mov	r0, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_set_pin_value+0x100>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_set_pin_value+0xfc>
 4f4:	84 2b       	or	r24, r20
 4f6:	8c 93       	st	X, r24
 4f8:	6c c0       	rjmp	.+216    	; 0x5d2 <DIO_set_pin_value+0x1e2>
 4fa:	a8 e3       	ldi	r26, 0x38	; 56
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	e8 e3       	ldi	r30, 0x38	; 56
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	8b 81       	ldd	r24, Y+3	; 0x03
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 2e       	mov	r0, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_set_pin_value+0x128>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_set_pin_value+0x124>
 51c:	80 95       	com	r24
 51e:	84 23       	and	r24, r20
 520:	8c 93       	st	X, r24
 522:	57 c0       	rjmp	.+174    	; 0x5d2 <DIO_set_pin_value+0x1e2>
	   break;
     case Group_C:
	   assign_bit(DIO_U8_PORTC,pin_NB,pin_value);
 524:	8c 81       	ldd	r24, Y+4	; 0x04
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	a1 f4       	brne	.+40     	; 0x552 <DIO_set_pin_value+0x162>
 52a:	a5 e3       	ldi	r26, 0x35	; 53
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	e5 e3       	ldi	r30, 0x35	; 53
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	48 2f       	mov	r20, r24
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 2e       	mov	r0, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_set_pin_value+0x158>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_set_pin_value+0x154>
 54c:	84 2b       	or	r24, r20
 54e:	8c 93       	st	X, r24
 550:	40 c0       	rjmp	.+128    	; 0x5d2 <DIO_set_pin_value+0x1e2>
 552:	a5 e3       	ldi	r26, 0x35	; 53
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e5 e3       	ldi	r30, 0x35	; 53
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	48 2f       	mov	r20, r24
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 2e       	mov	r0, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_set_pin_value+0x180>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_set_pin_value+0x17c>
 574:	80 95       	com	r24
 576:	84 23       	and	r24, r20
 578:	8c 93       	st	X, r24
 57a:	2b c0       	rjmp	.+86     	; 0x5d2 <DIO_set_pin_value+0x1e2>
	   break;
     case Group_D:
	   assign_bit(DIO_U8_PORTD,pin_NB,pin_value);
 57c:	8c 81       	ldd	r24, Y+4	; 0x04
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	a1 f4       	brne	.+40     	; 0x5aa <DIO_set_pin_value+0x1ba>
 582:	a2 e3       	ldi	r26, 0x32	; 50
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	e2 e3       	ldi	r30, 0x32	; 50
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	48 2f       	mov	r20, r24
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 2e       	mov	r0, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_set_pin_value+0x1b0>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_set_pin_value+0x1ac>
 5a4:	84 2b       	or	r24, r20
 5a6:	8c 93       	st	X, r24
 5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <DIO_set_pin_value+0x1e2>
 5aa:	a2 e3       	ldi	r26, 0x32	; 50
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	e2 e3       	ldi	r30, 0x32	; 50
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	48 2f       	mov	r20, r24
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 2e       	mov	r0, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_set_pin_value+0x1d8>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_set_pin_value+0x1d4>
 5cc:	80 95       	com	r24
 5ce:	84 23       	and	r24, r20
 5d0:	8c 93       	st	X, r24
	   break;
     }
}


return error_state;
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5d4:	26 96       	adiw	r28, 0x06	; 6
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
 5e0:	cf 91       	pop	r28
 5e2:	df 91       	pop	r29
 5e4:	08 95       	ret

000005e6 <DIO_set_port_value>:


U8 DIO_set_port_value(U8 port_NB,U8 port_value)
{
 5e6:	df 93       	push	r29
 5e8:	cf 93       	push	r28
 5ea:	00 d0       	rcall	.+0      	; 0x5ec <DIO_set_port_value+0x6>
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <DIO_set_port_value+0x8>
 5ee:	0f 92       	push	r0
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	8a 83       	std	Y+2, r24	; 0x02
 5f6:	6b 83       	std	Y+3, r22	; 0x03
U8 error_state = 0;
 5f8:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	84 30       	cpi	r24, 0x04	; 4
 5fe:	18 f0       	brcs	.+6      	; 0x606 <DIO_set_port_value+0x20>
{
	error_state = 1;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	89 83       	std	Y+1, r24	; 0x01
 604:	32 c0       	rjmp	.+100    	; 0x66a <DIO_set_port_value+0x84>
else if(port_value>DIO_Max_port_value)
{
	error_state = 1;
}
else{
     switch(port_NB){
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	3d 83       	std	Y+5, r19	; 0x05
 60e:	2c 83       	std	Y+4, r18	; 0x04
 610:	8c 81       	ldd	r24, Y+4	; 0x04
 612:	9d 81       	ldd	r25, Y+5	; 0x05
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	91 05       	cpc	r25, r1
 618:	d1 f0       	breq	.+52     	; 0x64e <DIO_set_port_value+0x68>
 61a:	2c 81       	ldd	r18, Y+4	; 0x04
 61c:	3d 81       	ldd	r19, Y+5	; 0x05
 61e:	22 30       	cpi	r18, 0x02	; 2
 620:	31 05       	cpc	r19, r1
 622:	2c f4       	brge	.+10     	; 0x62e <DIO_set_port_value+0x48>
 624:	8c 81       	ldd	r24, Y+4	; 0x04
 626:	9d 81       	ldd	r25, Y+5	; 0x05
 628:	00 97       	sbiw	r24, 0x00	; 0
 62a:	61 f0       	breq	.+24     	; 0x644 <DIO_set_port_value+0x5e>
 62c:	1e c0       	rjmp	.+60     	; 0x66a <DIO_set_port_value+0x84>
 62e:	2c 81       	ldd	r18, Y+4	; 0x04
 630:	3d 81       	ldd	r19, Y+5	; 0x05
 632:	22 30       	cpi	r18, 0x02	; 2
 634:	31 05       	cpc	r19, r1
 636:	81 f0       	breq	.+32     	; 0x658 <DIO_set_port_value+0x72>
 638:	8c 81       	ldd	r24, Y+4	; 0x04
 63a:	9d 81       	ldd	r25, Y+5	; 0x05
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	91 05       	cpc	r25, r1
 640:	81 f0       	breq	.+32     	; 0x662 <DIO_set_port_value+0x7c>
 642:	13 c0       	rjmp	.+38     	; 0x66a <DIO_set_port_value+0x84>
      case Group_A:
    	  DIO_U8_PORTA = port_value;
 644:	eb e3       	ldi	r30, 0x3B	; 59
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	80 83       	st	Z, r24
 64c:	0e c0       	rjmp	.+28     	; 0x66a <DIO_set_port_value+0x84>
	   break;
	   case Group_B:
		   DIO_U8_PORTB = port_value;
 64e:	e8 e3       	ldi	r30, 0x38	; 56
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	80 83       	st	Z, r24
 656:	09 c0       	rjmp	.+18     	; 0x66a <DIO_set_port_value+0x84>
	   break;
     case Group_C:
    	 DIO_U8_PORTC = port_value;
 658:	e5 e3       	ldi	r30, 0x35	; 53
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	8b 81       	ldd	r24, Y+3	; 0x03
 65e:	80 83       	st	Z, r24
 660:	04 c0       	rjmp	.+8      	; 0x66a <DIO_set_port_value+0x84>
	   break;
     case Group_D:
    	 DIO_U8_PORTD = port_value;
 662:	e2 e3       	ldi	r30, 0x32	; 50
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	80 83       	st	Z, r24
	   break;
     }
}


return error_state;
 66a:	89 81       	ldd	r24, Y+1	; 0x01
}
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	cf 91       	pop	r28
 678:	df 91       	pop	r29
 67a:	08 95       	ret

0000067c <DIO_set_port_direction>:


U8 DIO_set_port_direction(U8 port_NB, U8 port_direction)
{
 67c:	df 93       	push	r29
 67e:	cf 93       	push	r28
 680:	00 d0       	rcall	.+0      	; 0x682 <DIO_set_port_direction+0x6>
 682:	00 d0       	rcall	.+0      	; 0x684 <DIO_set_port_direction+0x8>
 684:	0f 92       	push	r0
 686:	cd b7       	in	r28, 0x3d	; 61
 688:	de b7       	in	r29, 0x3e	; 62
 68a:	8a 83       	std	Y+2, r24	; 0x02
 68c:	6b 83       	std	Y+3, r22	; 0x03
U8 error_state = 0;
 68e:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	84 30       	cpi	r24, 0x04	; 4
 694:	18 f0       	brcs	.+6      	; 0x69c <DIO_set_port_direction+0x20>
{
	error_state = 1;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	89 83       	std	Y+1, r24	; 0x01
 69a:	32 c0       	rjmp	.+100    	; 0x700 <DIO_set_port_direction+0x84>
else if( port_direction>DIO_Max_port_direction )
{
	error_state = 1;
}
else{
     switch(port_NB){
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	28 2f       	mov	r18, r24
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	3d 83       	std	Y+5, r19	; 0x05
 6a4:	2c 83       	std	Y+4, r18	; 0x04
 6a6:	8c 81       	ldd	r24, Y+4	; 0x04
 6a8:	9d 81       	ldd	r25, Y+5	; 0x05
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	91 05       	cpc	r25, r1
 6ae:	d1 f0       	breq	.+52     	; 0x6e4 <DIO_set_port_direction+0x68>
 6b0:	2c 81       	ldd	r18, Y+4	; 0x04
 6b2:	3d 81       	ldd	r19, Y+5	; 0x05
 6b4:	22 30       	cpi	r18, 0x02	; 2
 6b6:	31 05       	cpc	r19, r1
 6b8:	2c f4       	brge	.+10     	; 0x6c4 <DIO_set_port_direction+0x48>
 6ba:	8c 81       	ldd	r24, Y+4	; 0x04
 6bc:	9d 81       	ldd	r25, Y+5	; 0x05
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	61 f0       	breq	.+24     	; 0x6da <DIO_set_port_direction+0x5e>
 6c2:	1e c0       	rjmp	.+60     	; 0x700 <DIO_set_port_direction+0x84>
 6c4:	2c 81       	ldd	r18, Y+4	; 0x04
 6c6:	3d 81       	ldd	r19, Y+5	; 0x05
 6c8:	22 30       	cpi	r18, 0x02	; 2
 6ca:	31 05       	cpc	r19, r1
 6cc:	81 f0       	breq	.+32     	; 0x6ee <DIO_set_port_direction+0x72>
 6ce:	8c 81       	ldd	r24, Y+4	; 0x04
 6d0:	9d 81       	ldd	r25, Y+5	; 0x05
 6d2:	83 30       	cpi	r24, 0x03	; 3
 6d4:	91 05       	cpc	r25, r1
 6d6:	81 f0       	breq	.+32     	; 0x6f8 <DIO_set_port_direction+0x7c>
 6d8:	13 c0       	rjmp	.+38     	; 0x700 <DIO_set_port_direction+0x84>
      case Group_A:
    	  DIO_U8_DDRA = port_direction;
 6da:	ea e3       	ldi	r30, 0x3A	; 58
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
 6e0:	80 83       	st	Z, r24
 6e2:	0e c0       	rjmp	.+28     	; 0x700 <DIO_set_port_direction+0x84>
	   break;
	   case Group_B:
		   DIO_U8_DDRB = port_direction;
 6e4:	e7 e3       	ldi	r30, 0x37	; 55
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	80 83       	st	Z, r24
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <DIO_set_port_direction+0x84>
	   break;
     case Group_C:
    	 DIO_U8_DDRC = port_direction;
 6ee:	e4 e3       	ldi	r30, 0x34	; 52
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	8b 81       	ldd	r24, Y+3	; 0x03
 6f4:	80 83       	st	Z, r24
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <DIO_set_port_direction+0x84>
	   break;
     case Group_D:
    	 DIO_U8_DDRD = port_direction;
 6f8:	e1 e3       	ldi	r30, 0x31	; 49
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	8b 81       	ldd	r24, Y+3	; 0x03
 6fe:	80 83       	st	Z, r24
	   break;
     }
}


return error_state;
 700:	89 81       	ldd	r24, Y+1	; 0x01
}
 702:	0f 90       	pop	r0
 704:	0f 90       	pop	r0
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	cf 91       	pop	r28
 70e:	df 91       	pop	r29
 710:	08 95       	ret

00000712 <DIO_get_pin_value>:



U8 DIO_get_pin_value(U8 port_NB,U8  pin_NB,U8 * pin_value)
{
 712:	df 93       	push	r29
 714:	cf 93       	push	r28
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	27 97       	sbiw	r28, 0x07	; 7
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
 726:	8a 83       	std	Y+2, r24	; 0x02
 728:	6b 83       	std	Y+3, r22	; 0x03
 72a:	5d 83       	std	Y+5, r21	; 0x05
 72c:	4c 83       	std	Y+4, r20	; 0x04
U8 error_state = 0;
 72e:	19 82       	std	Y+1, r1	; 0x01
if(port_NB>= DIO_Max_port_NB)
 730:	8a 81       	ldd	r24, Y+2	; 0x02
 732:	84 30       	cpi	r24, 0x04	; 4
 734:	18 f0       	brcs	.+6      	; 0x73c <DIO_get_pin_value+0x2a>
{
	error_state = 1;
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	89 83       	std	Y+1, r24	; 0x01
 73a:	76 c0       	rjmp	.+236    	; 0x828 <DIO_get_pin_value+0x116>
}
else if(pin_NB>=DIO_Max_pin_NB)
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	88 30       	cpi	r24, 0x08	; 8
 740:	18 f0       	brcs	.+6      	; 0x748 <DIO_get_pin_value+0x36>
{
	error_state = 1;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	89 83       	std	Y+1, r24	; 0x01
 746:	70 c0       	rjmp	.+224    	; 0x828 <DIO_get_pin_value+0x116>
}

else{
     switch(port_NB){
 748:	8a 81       	ldd	r24, Y+2	; 0x02
 74a:	28 2f       	mov	r18, r24
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	3f 83       	std	Y+7, r19	; 0x07
 750:	2e 83       	std	Y+6, r18	; 0x06
 752:	4e 81       	ldd	r20, Y+6	; 0x06
 754:	5f 81       	ldd	r21, Y+7	; 0x07
 756:	41 30       	cpi	r20, 0x01	; 1
 758:	51 05       	cpc	r21, r1
 75a:	59 f1       	breq	.+86     	; 0x7b2 <DIO_get_pin_value+0xa0>
 75c:	8e 81       	ldd	r24, Y+6	; 0x06
 75e:	9f 81       	ldd	r25, Y+7	; 0x07
 760:	82 30       	cpi	r24, 0x02	; 2
 762:	91 05       	cpc	r25, r1
 764:	34 f4       	brge	.+12     	; 0x772 <DIO_get_pin_value+0x60>
 766:	2e 81       	ldd	r18, Y+6	; 0x06
 768:	3f 81       	ldd	r19, Y+7	; 0x07
 76a:	21 15       	cp	r18, r1
 76c:	31 05       	cpc	r19, r1
 76e:	69 f0       	breq	.+26     	; 0x78a <DIO_get_pin_value+0x78>
 770:	5b c0       	rjmp	.+182    	; 0x828 <DIO_get_pin_value+0x116>
 772:	4e 81       	ldd	r20, Y+6	; 0x06
 774:	5f 81       	ldd	r21, Y+7	; 0x07
 776:	42 30       	cpi	r20, 0x02	; 2
 778:	51 05       	cpc	r21, r1
 77a:	79 f1       	breq	.+94     	; 0x7da <DIO_get_pin_value+0xc8>
 77c:	8e 81       	ldd	r24, Y+6	; 0x06
 77e:	9f 81       	ldd	r25, Y+7	; 0x07
 780:	83 30       	cpi	r24, 0x03	; 3
 782:	91 05       	cpc	r25, r1
 784:	09 f4       	brne	.+2      	; 0x788 <DIO_get_pin_value+0x76>
 786:	3d c0       	rjmp	.+122    	; 0x802 <DIO_get_pin_value+0xf0>
 788:	4f c0       	rjmp	.+158    	; 0x828 <DIO_get_pin_value+0x116>
      case Group_A:
    	  * pin_value = get_bit(DIO_U8_PINA,pin_NB);
 78a:	e9 e3       	ldi	r30, 0x39	; 57
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	28 2f       	mov	r18, r24
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	88 2f       	mov	r24, r24
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	a9 01       	movw	r20, r18
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_get_pin_value+0x90>
 79e:	55 95       	asr	r21
 7a0:	47 95       	ror	r20
 7a2:	8a 95       	dec	r24
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_get_pin_value+0x8c>
 7a6:	ca 01       	movw	r24, r20
 7a8:	81 70       	andi	r24, 0x01	; 1
 7aa:	ec 81       	ldd	r30, Y+4	; 0x04
 7ac:	fd 81       	ldd	r31, Y+5	; 0x05
 7ae:	80 83       	st	Z, r24
 7b0:	3b c0       	rjmp	.+118    	; 0x828 <DIO_get_pin_value+0x116>
	   break;
	   case Group_B:
		   * pin_value=get_bit(DIO_U8_PINB,pin_NB);
 7b2:	e6 e3       	ldi	r30, 0x36	; 54
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
 7b8:	28 2f       	mov	r18, r24
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	8b 81       	ldd	r24, Y+3	; 0x03
 7be:	88 2f       	mov	r24, r24
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	a9 01       	movw	r20, r18
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_get_pin_value+0xb8>
 7c6:	55 95       	asr	r21
 7c8:	47 95       	ror	r20
 7ca:	8a 95       	dec	r24
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_get_pin_value+0xb4>
 7ce:	ca 01       	movw	r24, r20
 7d0:	81 70       	andi	r24, 0x01	; 1
 7d2:	ec 81       	ldd	r30, Y+4	; 0x04
 7d4:	fd 81       	ldd	r31, Y+5	; 0x05
 7d6:	80 83       	st	Z, r24
 7d8:	27 c0       	rjmp	.+78     	; 0x828 <DIO_get_pin_value+0x116>
	   break;
     case Group_C:
    	 * pin_value=get_bit(DIO_U8_PINC,pin_NB);
 7da:	e3 e3       	ldi	r30, 0x33	; 51
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	88 2f       	mov	r24, r24
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	a9 01       	movw	r20, r18
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_get_pin_value+0xe0>
 7ee:	55 95       	asr	r21
 7f0:	47 95       	ror	r20
 7f2:	8a 95       	dec	r24
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_get_pin_value+0xdc>
 7f6:	ca 01       	movw	r24, r20
 7f8:	81 70       	andi	r24, 0x01	; 1
 7fa:	ec 81       	ldd	r30, Y+4	; 0x04
 7fc:	fd 81       	ldd	r31, Y+5	; 0x05
 7fe:	80 83       	st	Z, r24
 800:	13 c0       	rjmp	.+38     	; 0x828 <DIO_get_pin_value+0x116>
	   break;
     case Group_D:
    	 * pin_value=get_bit(DIO_U8_PIND,pin_NB);
 802:	e0 e3       	ldi	r30, 0x30	; 48
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	28 2f       	mov	r18, r24
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	88 2f       	mov	r24, r24
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	a9 01       	movw	r20, r18
 814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_get_pin_value+0x108>
 816:	55 95       	asr	r21
 818:	47 95       	ror	r20
 81a:	8a 95       	dec	r24
 81c:	e2 f7       	brpl	.-8      	; 0x816 <DIO_get_pin_value+0x104>
 81e:	ca 01       	movw	r24, r20
 820:	81 70       	andi	r24, 0x01	; 1
 822:	ec 81       	ldd	r30, Y+4	; 0x04
 824:	fd 81       	ldd	r31, Y+5	; 0x05
 826:	80 83       	st	Z, r24
	   break;
     }

}
return error_state;
 828:	89 81       	ldd	r24, Y+1	; 0x01
}
 82a:	27 96       	adiw	r28, 0x07	; 7
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	f8 94       	cli
 830:	de bf       	out	0x3e, r29	; 62
 832:	0f be       	out	0x3f, r0	; 63
 834:	cd bf       	out	0x3d, r28	; 61
 836:	cf 91       	pop	r28
 838:	df 91       	pop	r29
 83a:	08 95       	ret

0000083c <__vector_10>:
#define OCR0   *((volatile U8 *)0X5C)


void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 83c:	1f 92       	push	r1
 83e:	0f 92       	push	r0
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	0f 92       	push	r0
 844:	11 24       	eor	r1, r1
 846:	2f 93       	push	r18
 848:	3f 93       	push	r19
 84a:	4f 93       	push	r20
 84c:	5f 93       	push	r21
 84e:	6f 93       	push	r22
 850:	7f 93       	push	r23
 852:	8f 93       	push	r24
 854:	9f 93       	push	r25
 856:	af 93       	push	r26
 858:	bf 93       	push	r27
 85a:	ef 93       	push	r30
 85c:	ff 93       	push	r31
 85e:	df 93       	push	r29
 860:	cf 93       	push	r28
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62

		static U8 var=0;
		toggle_bit(var,0);
 866:	90 91 60 00 	lds	r25, 0x0060
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	89 27       	eor	r24, r25
 86e:	80 93 60 00 	sts	0x0060, r24
		DIO_set_pin_value(Group_B, DIO_pin_B0,var);
 872:	90 91 60 00 	lds	r25, 0x0060
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	49 2f       	mov	r20, r25
 87c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_set_pin_value>
}
 880:	cf 91       	pop	r28
 882:	df 91       	pop	r29
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	bf 91       	pop	r27
 88a:	af 91       	pop	r26
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	7f 91       	pop	r23
 892:	6f 91       	pop	r22
 894:	5f 91       	pop	r21
 896:	4f 91       	pop	r20
 898:	3f 91       	pop	r19
 89a:	2f 91       	pop	r18
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <main>:



void main(void)
{
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	df 93       	push	r29
 8ac:	cf 93       	push	r28
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
DIO_set_pin_direction(Group_A,DIO_pin_A7,DIO_Input);
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	67 e0       	ldi	r22, 0x07	; 7
 8b6:	40 e0       	ldi	r20, 0x00	; 0
 8b8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_direction>
DIO_set_pin_direction(Group_B,DIO_pin_B0,DIO_Output);
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	41 e0       	ldi	r20, 0x01	; 1
 8c2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_set_pin_direction>

//for buzzer
TCCR0=0b00001010; //CTC MODE AND PRESCALER = 8 AND TOGG,E EACH COMPARE MATCH
 8c6:	e3 e5       	ldi	r30, 0x53	; 83
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	8a e0       	ldi	r24, 0x0A	; 10
 8cc:	80 83       	st	Z, r24

// for motor
//TCCR0 =0b01111010;


set_bit(TIMSK,1);   //ENable interrupt peripheral
 8ce:	a9 e5       	ldi	r26, 0x59	; 89
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	e9 e5       	ldi	r30, 0x59	; 89
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	82 60       	ori	r24, 0x02	; 2
 8da:	8c 93       	st	X, r24

set_bit(SREG,7);    //global interrupt enable
 8dc:	af e5       	ldi	r26, 0x5F	; 95
 8de:	b0 e0       	ldi	r27, 0x00	; 0
 8e0:	ef e5       	ldi	r30, 0x5F	; 95
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	80 68       	ori	r24, 0x80	; 128
 8e8:	8c 93       	st	X, r24

ADC_init();
 8ea:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>

while(1)
  {
   OCR0 =ADC_ChannelReading(7);
 8ee:	0c e5       	ldi	r16, 0x5C	; 92
 8f0:	10 e0       	ldi	r17, 0x00	; 0
 8f2:	87 e0       	ldi	r24, 0x07	; 7
 8f4:	0e 94 76 00 	call	0xec	; 0xec <ADC_ChannelReading>
 8f8:	f8 01       	movw	r30, r16
 8fa:	80 83       	st	Z, r24
 8fc:	f8 cf       	rjmp	.-16     	; 0x8ee <main+0x48>

000008fe <_exit>:
 8fe:	f8 94       	cli

00000900 <__stop_program>:
 900:	ff cf       	rjmp	.-2      	; 0x900 <__stop_program>
